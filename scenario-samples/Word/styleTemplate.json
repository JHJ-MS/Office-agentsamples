{
    "Templates": [
        {
            "Description": "Get the number of styles. Applie a style. Get and Set format ( paragraphFormat ) of a style. Add and delete a custom style.",
            "SampleCodes": "enum OutlineLevel {\n  outlineLevel1,\n  outlineLevel2,\n  outlineLevel3,\n  outlineLevel4,\n  outlineLevel5,\n  outlineLevel6,\n  outlineLevel7,\n  outlineLevel8,\n  outlineLevel9,\n  outlineLevelBodyText\n}\n\nasync function getCount() {\n  // Gets the number of styles.\n  await Word.run(async (context) => {\n    const styles = context.document.getStyles();\n    const count = styles.getCount();\n    await context.sync();\n  });\n}\n\nasync function addStyle() {\n  // Adds a new style.\n  await Word.run(async (context) => {\n    const newStyleName = \"newStyleName\"; //Replaced by your own new style name\n    const style = context.document.getStyles().getByNameOrNullObject(newStyleName);\n    if (!style.isNullObject) {\n      return;\n    }\n    context.document.addStyle(newStyleName, Word.StyleType.paragraph);\n    await context.sync();\n  });\n}\n\nasync function getProperties() {\n  // Gets the properties of the specified style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);    \n    if (style.isNullObject) {\n      return;\n    } else {\n      style.load();\n      style.font.load();\n      style.paragraphFormat.load();\n      await context.sync();\n      console.log(style);\n    }\n  });\n}\n\nasync function applyStyle() {\n  // Applies the specified style to a paragraph.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject || style.type != Word.StyleType.paragraph) {\n      return;\n    } else {\n      const body = context.document.body;\n      body.clear();\n      body.insertParagraph(\n        \"A new paragraph\",\n        \"Start\"\n      );\n      const paragraph = body.paragraphs.getFirst();\n      paragraph.style = style.nameLocal;\n      await context.sync();\n    }\n  });\n}\n\nasync function setFontAndParagraphFormatProperties() {\n  // Updates font properties (e.g., color, size) of the specified style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.paragraphFormat.alignment = Word.Alignment.centered;\n      style.paragraphFormat.leftIndent = 30;\n      style.font.color = \"#FF0000\";\n      style.font.size = 20;\n      await context.sync();\n    }\n  });\n}\n\nasync function deleteStyle() {\n  // Deletes the custom style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by customed style name to delete\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.delete();\n    }\n  });\n}\n\nasync function getTableStyle() {\n  // Gets the table style properties and displays them in the form.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.load();\n    await context.sync();\n\n    if (tableStyle.isNullObject) {\n      return;\n    }\n    console.log(tableStyle);\n  });\n}\n\nasync function setAlignment() {\n  // Sets the table alignment.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.alignment = Word.Alignment.right;\n    await context.sync();\n  });\n}\n\nasync function setAllowBreakAcrossPage() {\n  // Sets the allowBreakAcrossPage property.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.allowBreakAcrossPage = true;\n    await context.sync();\n  });\n}\n\nasync function setTopCellMargin() {\n  // Sets the top cell margin.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.topCellMargin = 1;\n    await context.sync();\n  });\n}"
        }
    ]
}