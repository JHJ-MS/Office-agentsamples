{
    "Templates": [
        {
            "Description": "Gets the number of styles. Adds a new style. Gets the properties of the specified style. Applies the specified style to a paragraph. Updates font properties of the specified style. Sets the specified style's paragraph format. Deletes the custom style.",
            "SampleCodes": "enum OutlineLevel {\n  outlineLevel1,\n  outlineLevel2,\n  outlineLevel3,\n  outlineLevel4,\n  outlineLevel5,\n  outlineLevel6,\n  outlineLevel7,\n  outlineLevel8,\n  outlineLevel9,\n  outlineLevelBodyText\n}\nasync function getCount() {\n  // Gets the number of styles.\n  await Word.run(async (context) => {\n    const styles = context.document.getStyles();\n    const count = styles.getCount();\n    await context.sync();\n  });\n}\n\nasync function addStyle() {\n  // Adds a new style.\n  await Word.run(async (context) => {\n    const newStyleName = \"newStyleName\"; //Replaced by your own new style name\n    if (newStyleName == \"\") {\n      return;\n    }\n\n    const style = context.document.getStyles().getByNameOrNullObject(newStyleName);\n    style.load();\n    await context.sync();\n\n    if (!style.isNullObject) {\n      return;\n    }\n\n    const newStyleType = Word.StyleType.paragraph;\n    context.document.addStyle(newStyleName, newStyleType);\n    await context.sync();\n  });\n}\n\nasync function getProperties() {\n  // Gets the properties of the specified style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n  if (styleName == \"\") {\n      return;\n   }\n\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.font.load();\n      style.paragraphFormat.load();\n      await context.sync();\n      console.log(style);\n    }\n  });\n}\n\nasync function applyStyle() {\n  // Applies the specified style to a paragraph.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n   if (styleName == \"\") {\n      return;\n   }\n\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject || style.type != Word.StyleType.paragraph) {\n      return;\n    } else {\n      const body = context.document.body;\n      body.clear();\n      body.insertParagraph(\n        \"A new paragraph\",\n        \"Start\"\n      );\n      const paragraph = body.paragraphs.getFirst();\n      paragraph.style = style.nameLocal;\n      await context.sync();\n    }\n  });\n}\n\nasync function setFontProperties() {\n  // Updates font properties (e.g., color, size) of the specified style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n if (styleName == \"\") {\n      return;\n   }\n\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      return;\n    } else {\n      const font = style.font;\n      font.color = \"#FF0000\";\n      font.size = 20;\n   await context.sync();\n    }\n  });\n}\n\nasync function setParagraphFormat() {\n  // Sets certain aspects of the specified style's paragraph format e.g., the left indent size and the alignment.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by your own style name\n   if (styleName == \"\") {\n      return;\n   }\n\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.paragraphFormat.leftIndent = 30;\n      style.paragraphFormat.alignment = Word.Alignment.centered;\n   await context.sync();\n    }\n  });\n}\n\nasync function deleteStyle() {\n  // Deletes the custom style.\n  await Word.run(async (context) => {\n    const styleName = \"styleName\"; //Replaced by customed style name to delete\n   if (styleName == \"\") {\n      return;\n   }\n\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.delete();\n    }\n  });\n}\n\nasync function importStylesFromJson() {\n  // Imports styles from JSON.\n  await Word.run(async (context) => {\n    const str =\n      '{\"styles\":[{\"baseStyle\":\"Normal\",\"builtIn\":false,\"inUse\":true,\"linked\":false,\"nextParagraphStyle\":\"NewParaStyle\",\"nameLocal\":\"NewParaStyle\",\"priority\":1,\"quickStyle\":true,\"type\":\"Paragraph\",\"unhideWhenUsed\":false,\"visibility\":false,\"paragraphFormat\":{\"alignment\":\"Centered\",\"firstLineIndent\":0.0,\"keepTogether\":false,\"keepWithNext\":false,\"leftIndent\":72.0,\"lineSpacing\":18.0,\"lineUnitAfter\":0.0,\"lineUnitBefore\":0.0,\"mirrorIndents\":false,\"outlineLevel\":\"OutlineLevelBodyText\",\"rightIndent\":72.0,\"spaceAfter\":30.0,\"spaceBefore\":30.0,\"widowControl\":true},\"font\":{\"name\":\"DengXian\",\"size\":14.0,\"bold\":true,\"italic\":true,\"color\":\"#8DD873\",\"underline\":\"Single\",\"subscript\":false,\"superscript\":false,\"strikeThrough\":false,\"doubleStrikeThrough\":true,\"highlightColor\":null,\"hidden\":false}}]}';\n    const styles = context.document.importStylesFromJson(str);\n    await context.sync();\n    console.log(styles);\n  });\n}"
        }
    ]
}