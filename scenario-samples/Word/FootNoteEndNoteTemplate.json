{
    "Templates": [
      {
        "Description": "These APIs are related to Footnote, Endnote APIs, including but not limited to: insert footnote/endnote, get all the footnote/endnote in the document/range, delete footnote/endnote, get RangeBody of a footnote or endnote",
        "SampleCodes": "// Footnote, Endnote APIs required Word Javascript API 1.5 or above.\nasync function insertFootnote() {\n  // Sets a footnote on the selected content.\n  await Word.run(async (context) => {\n    const text = $(\"#input-footnote\")\n      .val()\n      .toString();\n    const footnote = context.document.getSelection().insertFootnote(text);\n    await context.sync();\n\n    console.log(\"Inserted footnote.\");\n  });\n}\nasync function getReference() {\n  // Selects the footnote's reference mark in the document body.\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items/reference\");\n    await context.sync();\n\n    const referenceNumber = $(\"#input-reference\").val();\n    const mark = (referenceNumber as number) - 1;\n    const item = footnotes.items[mark];\n    const reference = item.reference;\n    reference.select();\n    await context.sync();\n\n    console.log(`Reference ${referenceNumber} is selected.`);\n  });\n}\nasync function getFootnoteType() {\n  // Gets the referenced note's item type and body type, which are both \"Footnote\".\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items\");\n    await context.sync();\n\n    const referenceNumber = $(\"#input-reference\").val();\n    const mark = (referenceNumber as number) - 1;\n    const item = footnotes.items[mark];\n    console.log(`Note type of footnote ${referenceNumber}: ${item.type}`);\n\n    item.body.load(\"type\");\n    await context.sync();\n\n    console.log(`Body type of note: ${item.body.type}`);\n  });\n}\nasync function getFootnoteBody() {\n  // Gets the text of the referenced footnote.\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items/body\");\n    await context.sync();\n\n    const referenceNumber = $(\"#input-reference\").val();\n    const mark = (referenceNumber as number) - 1;\n    const footnoteBody = footnotes.items[mark].body.getRange();\n    footnoteBody.load(\"text\");\n    await context.sync();\n\n    console.log(`Text of footnote ${referenceNumber}: ${footnoteBody.text}`);\n  });\n}\nasync function getNextFootnote() {\n  // Selects the next footnote in the document body.\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items/reference\");\n    await context.sync();\n\n    const referenceNumber = $(\"#input-reference\").val();\n    const mark = (referenceNumber as number) - 1;\n    const reference = footnotes.items[mark].getNext().reference;\n    reference.select();\n    console.log(\"Selected is the next footnote: \" + (mark + 2));\n  });\n}\nasync function deleteFootnote() {\n  // Deletes this referenced footnote.\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"items\");\n    await context.sync();\n\n    const referenceNumber = $(\"#input-reference\").val();\n    const mark = (referenceNumber as number) - 1;\n    footnotes.items[mark].delete();\n    await context.sync();\n\n    console.log(\"Footnote deleted.\");\n  });\n}\nasync function getFirstFootnote() {\n  // Gets the first footnote in the document body and select its reference mark.\n  await Word.run(async (context) => {\n    const reference = context.document.body.footnotes.getFirst().reference;\n    reference.select();\n    console.log(\"The first footnote is selected.\");\n  });\n}\nasync function getFootnotesFromBody() {\n  // Gets the footnotes in the document body.\n  await Word.run(async (context) => {\n    const footnotes = context.document.body.footnotes;\n    footnotes.load(\"length\");\n    await context.sync();\n\n    console.log(\"Number of footnotes in the document body: \" + footnotes.items.length);\n  });\n}\nasync function getFootnotesFromRange() {\n  // Gets the footnotes in the selected document range.\n  await Word.run(async (context) => {\n    const footnotes = context.document.getSelection().footnotes;\n    footnotes.load(\"length\");\n    await context.sync();\n\n    console.log(\"Number of footnotes in the selected range: \" + footnotes.items.length);\n  });\n}\nasync function setup() {\n  // Set two paragraphs of sample text.\n  await Word.run(async (context) => {\n    const body = context.document.body;\n    body.clear();\n    body.insertParagraph(\n      \"Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.\",\n      \"Start\"\n    );\n    body.paragraphs\n      .getLast()\n      .insertText(\n        \"To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching Online cover page, header, and sidebar. Click Insert and then choose the Online elements you want from the different Online galleries.\",\n        \"Replace\"\n      );\n  });\n}\n// Default helper for invoking an action and handling errors.\nasync function tryCatch(callback) {\n  try {\n    await callback();\n  } catch (error) {\n    // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n    console.error(error);\n  }\n}\n"
      }
    ]
  }