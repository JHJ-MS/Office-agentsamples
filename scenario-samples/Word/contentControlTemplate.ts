export const contentControlTemplate = [
  {
    "description": "Get all the comments in the document, selection, insert a new comment, delete a comment, and reply to a comment.",
    "example": "\nasync function insertContentControls() {\n  // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\n  await Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); // Don\'t need any properties; just wrap each paragraph with a content control.\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n      let contentControl = paragraphs.items[i].insertContentControl(); // insert content control on the paragraph\n      // For even, tag \"even\".\n      if (i % 2 === 0) {\n        contentControl.tag = \"even\";\n      } else {\n        contentControl.tag = \"odd\";\n      }\n    }\n    console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n    await context.sync();\n  });\n}\n\nasync function modifyContentControls() {\n  // Adds title and colors to odd and even content controls and changes their appearance.\n  await Word.run(async (context) => {\n    // Get the complete sentence (as range) associated with the insertion point.\n    let evenContentControls = context.document.contentControls.getByTag(\"even\");\n    let oddContentControls = context.document.contentControls.getByTag(\"odd\");\n    evenContentControls.load(\"length\");\n    oddContentControls.load(\"length\");\n\n    await context.sync();\n\n    for (let i = 0; i < evenContentControls.items.length; i++) {\n      // Change a few properties and append a paragraph\n      evenContentControls.items[i].set({\n        color: \"red\",\n        title: \"Odd ContentControl #\" + (i + 1),\n        appearance: Word.ContentControlAppearance.tags\n      });\n      evenContentControls.items[i].insertParagraph(\"This is an odd content control\", \"End\");\n    }\n\n    for (let j = 0; j < oddContentControls.items.length; j++) {\n      // Change a few properties and append a paragraph\n      oddContentControls.items[j].set({\n        color: \"green\",\n        title: \"Even ContentControl #\" + (j + 1),\n        appearance: \"Tags\"\n      });\n      oddContentControls.items[j].insertHtml(\"This is an <b>even</b> content control\", \"End\");\n    }\n\n    await context.sync();\n  });\n}\n\nlet eventContext;\nasync function registerOnContentControlAddedHandler() {\n  // Registers the onContentControlAdded event handler on the document.\n  await Word.run(async (context) => {\n    eventContext = context.document.onContentControlAdded.add(contentControlAdded);\n    await context.sync();\n\n    console.log(\"Added event handler for when content controls are added.\");\n  });\n}\n\nasync function contentControlAdded(event: Word.ContentControlAddedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were added:`);\n    console.log(event.ids);\n  });\n}\n\nasync function registerOnDataEventHandlers() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // Register the onDataChanged event handler on each content control.\n    if (contentControls.items.length === 0) {\n      console.log(\"There aren\'t any content controls in this document so can\'t register event handlers.\");\n    } else {\n      for (let i = 0; i < contentControls.items.length; i++) {\n        eventContexts[i] = contentControls.items[i].onDataChanged.add(contentControlDataChanged);\n        contentControls.items[i].track();\n      }\n\n      await context.sync();\n\n      console.log(\"Added event handlers for when data is changed in content controls.\");\n    }\n  });\n}\n\nasync function contentControlDataChanged(event: Word.ContentControlDataChangedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`);\n    console.log(event.ids);\n  });\n}\n\n\nasync function setup() {\n  await Word.run(async (context) => {\n    const body = context.document.body;\n    body.clear();\n    body.insertParagraph(\"One more paragraph. \", \"Start\");\n    body.insertParagraph(\"Inserting another paragraph. \", \"Start\");\n    body.insertParagraph(\n      \"Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.\",\n      \"Start\"\n    );\n    body.paragraphs\n      .getLast()\n      .insertText(\n        \"To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching cover page, header, and sidebar. Click Insert and then choose the elements you want from the different galleries. \",\n        \"Replace\"\n      );\n  });\n}\n\n\nlet eventContexts = [];\nasync function registerOnDeletedEventHandlers() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // Register the onDeleted event handler on each content control.\n    if (contentControls.items.length === 0) {\n      console.log(\"There aren\'t any content controls in this document so can\'t register event handlers.\");\n    } else {\n      for (let i = 0; i < contentControls.items.length; i++) {\n        eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);\n        contentControls.items[i].track();\n      }\n\n      await context.sync();\n\n      console.log(\"Added event handlers for when content controls are deleted.\");\n    }\n  });\n}\n\nasync function contentControlDeleted(event: Word.ContentControlDeletedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);\n    console.log(event.ids);\n  });\n}"
  }];
