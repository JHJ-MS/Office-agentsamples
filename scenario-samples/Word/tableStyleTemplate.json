{
    "Templates": [
        {
            "Description": "Adds a new table style. Applies the specified style to a new table. Gets the table style properties. Sets the table alignment, allowBreakAcrossPage, top cell margin, bottom cell margin, left cell margin, right cell margin and cell spacing. Deletes the custom style. Imports styles from JSON.",
            "SampleCodes": "async function addStyle() {\n  // Adds a new table style.\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(newStyleName);\n    style.load();\n    await context.sync();\n\n    if (!style.isNullObject) {\n      console.warn(\n        `There's an existing style with the same name '${newStyleName}'! Please provide another style name.`\n      );\n      return;\n    }\n\n    context.document.addStyle(newStyleName, Word.StyleType.table);\n    await context.sync();\n\n    console.log(newStyleName + \" has been added to the style list.\");\n  });\n}\n\nasync function applyStyle() {\n  // Applies the specified style to a new table.\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      console.warn(`There's no existing style with the name '${styleName}'.`);\n    } else if (style.type != Word.StyleType.table) {\n      console.warn(`The '${styleName}' style isn't a table style.`);\n    } else {\n      const body = context.document.body;\n      body.clear();\n      const data = [\n        [\"Tokyo\", \"Beijing\", \"Seattle\"],\n        [\"Apple\", \"Orange\", \"Pineapple\"]\n      ];\n      const table = body.insertTable(2, 3, \"Start\", data);\n      table.style = style.nameLocal;\n      table.styleFirstColumn = false;\n      await context.sync();\n\n      console.log(`'${styleName}' style applied to first table.`);\n      console.log(style);\n    }\n  });\n}\n\nasync function getTableStyle() {\n  // Gets the table style properties and displays them in the form.\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.load();\n    await context.sync();\n\n    if (tableStyle.isNullObject) {\n      console.warn(`There's no existing table style with the name '${styleName}'.`);\n      return;\n    }\n\n    console.log(tableStyle);\n    $(\"#alignment\").val(tableStyle.alignment);\n    $(\"#allow-break-across-page\").val(tableStyle.allowBreakAcrossPage.toString());\n    $(\"#top-cell-margin\").val(tableStyle.topCellMargin);\n    $(\"#bottom-cell-margin\").val(tableStyle.bottomCellMargin);\n    $(\"#left-cell-margin\").val(tableStyle.leftCellMargin);\n    $(\"#right-cell-margin\").val(tableStyle.rightCellMargin);\n    $(\"#cell-spacing\").val(tableStyle.cellSpacing);\n  });\n}\n\nasync function setAlignment() {\n  // Sets the table alignment.\n  await Word.run(async (context) => {\n    const alignment = $(\"#alignment\")\n      .val()\n      .toString();\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.alignment = alignment as Word.Alignment;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Alignment: \" + tableStyle.alignment);\n  });\n}\n\nasync function setAllowBreakAcrossPage() {\n  // Sets the allowBreakAcrossPage property.\n  await Word.run(async (context) => {\n    const allowBreakAcrossPage = $(\"#allow-break-across-page\").val() as string;\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.allowBreakAcrossPage = allowBreakAcrossPage === \"true\";\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"allowBreakAcrossPage: \" + tableStyle.allowBreakAcrossPage);\n  });\n}\n\nasync function setTopCellMargin() {\n  // Sets the top cell margin.\n  await Word.run(async (context) => {\n    const topCellMargin = Number(\n      $(\"#top-cell-margin\")\n        .val()\n        .toString()\n    );\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.topCellMargin = topCellMargin;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Top cell margin: \" + tableStyle.topCellMargin);\n  });\n}\n\nasync function setBottomCellMargin() {\n  // Sets the bottom cell margin.\n  await Word.run(async (context) => {\n    const bottomCellMargin = Number(\n      $(\"#bottom-cell-margin\")\n        .val()\n        .toString()\n    );\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.bottomCellMargin = bottomCellMargin;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Bottom cell margin: \" + tableStyle.bottomCellMargin);\n  });\n}\n\nasync function setLeftCellMargin() {\n  // Sets the left cell margin.\n  await Word.run(async (context) => {\n    const leftCellMargin = Number(\n      $(\"#left-cell-margin\")\n        .val()\n        .toString()\n    );\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.leftCellMargin = leftCellMargin;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Left cell margin: \" + tableStyle.leftCellMargin);\n  });\n}\n\nasync function setRightCellMargin() {\n  // Sets the right cell margin.\n  await Word.run(async (context) => {\n    const rightCellMargin = Number(\n      $(\"#right-cell-margin\")\n        .val()\n        .toString()\n    );\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.rightCellMargin = rightCellMargin;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Right cell margin: \" + tableStyle.rightCellMargin);\n  });\n}\n\nasync function setCellSpacing() {\n  // Sets the cell spacing.\n  await Word.run(async (context) => {\n    const cellSpacing = Number(\n      $(\"#cell-spacing\")\n        .val()\n        .toString()\n    );\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.cellSpacing = cellSpacing;\n    await context.sync();\n\n    tableStyle.load();\n    await context.sync();\n    console.log(\"Cell spacing: \" + tableStyle.cellSpacing);\n  });\n}\n\nasync function deleteStyle() {\n  // Deletes the custom style.\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      console.warn(`There's no existing style with the name '${styleName}'.`);\n    } else {\n      style.delete();\n      console.log(`Successfully deleted custom style '${styleName}'.`);\n    }\n  });\n}\n\nasync function importStylesFromJson() {\n  // Imports styles from JSON.\n  await Word.run(async (context) => {\n    const str =\n      '{\"styles\":[{\"baseStyle\":\"Default Paragraph Font\",\"builtIn\":false,\"inUse\":true,\"linked\":false,\"nameLocal\":\"NewCharStyle\",\"priority\":2,\"quickStyle\":true,\"type\":\"Character\",\"unhideWhenUsed\":false,\"visibility\":false,\"paragraphFormat\":null,\"font\":{\"name\":\"DengXian Light\",\"size\":16.0,\"bold\":true,\"italic\":false,\"color\":\"#F1A983\",\"underline\":\"None\",\"subscript\":false,\"superscript\":true,\"strikeThrough\":true,\"doubleStrikeThrough\":false,\"highlightColor\":null,\"hidden\":false},\"shading\":{\"backgroundPatternColor\":\"#FF0000\"}},{\"baseStyle\":\"Normal\",\"builtIn\":false,\"inUse\":true,\"linked\":false,\"nextParagraphStyle\":\"NewParaStyle\",\"nameLocal\":\"NewParaStyle\",\"priority\":1,\"quickStyle\":true,\"type\":\"Paragraph\",\"unhideWhenUsed\":false,\"visibility\":false,\"paragraphFormat\":{\"alignment\":\"Centered\",\"firstLineIndent\":0.0,\"keepTogether\":false,\"keepWithNext\":false,\"leftIndent\":72.0,\"lineSpacing\":18.0,\"lineUnitAfter\":0.0,\"lineUnitBefore\":0.0,\"mirrorIndents\":false,\"outlineLevel\":\"OutlineLevelBodyText\",\"rightIndent\":72.0,\"spaceAfter\":30.0,\"spaceBefore\":30.0,\"widowControl\":true},\"font\":{\"name\":\"DengXian\",\"size\":14.0,\"bold\":true,\"italic\":true,\"color\":\"#8DD873\",\"underline\":\"Single\",\"subscript\":false,\"superscript\":false,\"strikeThrough\":false,\"doubleStrikeThrough\":true,\"highlightColor\":null,\"hidden\":false},\"shading\":{\"backgroundPatternColor\":\"#00FF00\"}},{\"baseStyle\":\"Table Normal\",\"builtIn\":false,\"inUse\":true,\"linked\":false,\"nextParagraphStyle\":\"NewTableStyle\",\"nameLocal\":\"NewTableStyle\",\"priority\":100,\"type\":\"Table\",\"unhideWhenUsed\":false,\"visibility\":false,\"paragraphFormat\":{\"alignment\":\"Left\",\"firstLineIndent\":0.0,\"keepTogether\":false,\"keepWithNext\":false,\"leftIndent\":0.0,\"lineSpacing\":12.0,\"lineUnitAfter\":0.0,\"lineUnitBefore\":0.0,\"mirrorIndents\":false,\"outlineLevel\":\"OutlineLevelBodyText\",\"rightIndent\":0.0,\"spaceAfter\":0.0,\"spaceBefore\":0.0,\"widowControl\":true},\"font\":{\"name\":\"DengXian\",\"size\":20.0,\"bold\":false,\"italic\":true,\"color\":\"#D86DCB\",\"underline\":\"None\",\"subscript\":false,\"superscript\":false,\"strikeThrough\":false,\"doubleStrikeThrough\":false,\"highlightColor\":null,\"hidden\":false},\"tableStyle\":{\"allowBreakAcrossPage\":true,\"alignment\":\"Left\",\"bottomCellMargin\":0.0,\"leftCellMargin\":0.08,\"rightCellMargin\":0.08,\"topCellMargin\":0.0,\"cellSpacing\":0.0},\"shading\":{\"backgroundPatternColor\":\"#60CAF3\"}}]}';\n    const styles = context.document.importStylesFromJson(str);\n    await context.sync();\n    console.log(\"Styles imported from JSON:\");\n    console.log(styles);\n  });\n}"
        }
    ]
}