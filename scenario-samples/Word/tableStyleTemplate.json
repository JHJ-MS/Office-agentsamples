{
    "Templates": [
        {
            "Description": "Adds or deletes a custom table style. Applies a table style. Gets the table style properties. Sets the table style alignment, allowBreakAcrossPage, top cell margin, bottom cell margin, left cell margin, right cell margin and cell spacing.",
            "SampleCodes": "async function addStyle() {\n  // Adds a new table style.\n  const newStyleName = \"newStyleName\"; //Replaced by your own new style name\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(newStyleName);\n    style.load();\n    await context.sync();\n\n    if (!style.isNullObject) {\n      return;\n    }\n    context.document.addStyle(newStyleName, Word.StyleType.table);\n    await context.sync();\n  });\n}\n\nasync function applyStyle() {\n  // Applies the specified style to a new table.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject || style.type != Word.StyleType.table) {\n      return;\n    } else {\n      const body = context.document.body;\n      body.clear();\n      const data = [\n        [\"Tokyo\", \"Beijing\", \"Seattle\"],\n        [\"Apple\", \"Orange\", \"Pineapple\"]\n      ];\n      const table = body.insertTable(2, 3, \"Start\", data);\n      table.style = style.nameLocal;\n      table.styleFirstColumn = false;\n      await context.sync();\n    }\n  });\n}\n\nasync function getTableStyle() {\n  // Gets the table style properties and displays them in the form.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.load();\n    await context.sync();\n\n    if (tableStyle.isNullObject) {\n      return;\n    }\n    console.log(tableStyle);\n  });\n}\n\nasync function setAlignment() {\n  // Sets the table alignment.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.alignment = Word.Alignment.right;\n    await context.sync();\n  });\n}\n\nasync function setAllowBreakAcrossPage() {\n  // Sets the allowBreakAcrossPage property.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.allowBreakAcrossPage = true;\n    await context.sync();\n  });\n}\n\nasync function setTopCellMargin() {\n  // Sets the top cell margin.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const tableStyle = context.document.getStyles().getByName(styleName).tableStyle;\n    tableStyle.topCellMargin = 1;\n    await context.sync();\n  });\n}\n\nasync function deleteStyle() {\n  // Deletes the custom style.\n  const styleName = \"styleName\"; //Replaced by your own style name\n  await Word.run(async (context) => {\n    const style = context.document.getStyles().getByNameOrNullObject(styleName);\n    style.load();\n    await context.sync();\n\n    if (style.isNullObject) {\n      return;\n    } else {\n      style.delete();\n    }\n  });\n}"
        }
    ]
}