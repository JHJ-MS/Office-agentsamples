{
  "Templates": [
    {
      "Description": "This sample demonstrates how to insert content controls in a Word document and modify their properties. It also shows how to register event handlers for content control events such as onDataChanged, onDeleted, and onContentControlAdded.",
      "SampleCodes": "async function insertContentControls() {  // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.  await Word.run(async (context) => {    let paragraphs = context.document.body.paragraphs;    paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.    await context.sync();    for (let i = 0; i < paragraphs.items.length; i++) {      let contentControl = paragraphs.items[i].insertContentControl(); // insert content control on the paragraph      // For even, tag \"even\".      if (i % 2 === 0) {        contentControl.tag = \"even\";      } else {        contentControl.tag = \"odd\";      }    }    console.log(\"Content controls inserted: \" + paragraphs.items.length);    await context.sync();  });}async function modifyContentControls() {  // Adds title and colors to odd and even content controls and changes their appearance.  await Word.run(async (context) => {    // Get the complete sentence (as range) associated with the insertion point.    let evenContentControls = context.document.contentControls.getByTag(\"even\");    let oddContentControls = context.document.contentControls.getByTag(\"odd\");    evenContentControls.load(\"length\");    oddContentControls.load(\"length\");    await context.sync();    for (let i = 0; i < evenContentControls.items.length; i++) {      // Change a few properties and append a paragraph      evenContentControls.items[i].set({        color: \"red\",        title: \"Odd ContentControl #\" + (i + 1),        appearance: Word.ContentControlAppearance.tags      });      evenContentControls.items[i].insertParagraph(\"This is an odd content control\", \"End\");    }    for (let j = 0; j < oddContentControls.items.length; j++) {      // Change a few properties and append a paragraph      oddContentControls.items[j].set({        color: \"green\",        title: \"Even ContentControl #\" + (j + 1),        appearance: \"Tags\"      });      oddContentControls.items[j].insertHtml(\"This is an <b>even<\/b> content control\", \"End\");    }    await context.sync();  });}let eventContext;async function registerOnContentControlAddedHandler() {  // Registers the onContentControlAdded event handler on the document.  await Word.run(async (context) => {    eventContext = context.document.onContentControlAdded.add(contentControlAdded);    await context.sync();    console.log(\"Added event handler for when content controls are added.\");  });}async function contentControlAdded(event: Word.ContentControlAddedEventArgs) {  await Word.run(async (context) => {    console.log(`${event.eventType} event detected. IDs of content controls that were added:`);    console.log(event.ids);  });}async function registerOnDataEventHandlers() {  await Word.run(async (context) => {    const contentControls = context.document.contentControls;    contentControls.load(\"items\");    await context.sync();    // Register the onDataChanged event handler on each content control.    if (contentControls.items.length === 0) {      console.log(\"There aren't any content controls in this document so can't register event handlers.\");    } else {      for (let i = 0; i < contentControls.items.length; i++) {        eventContexts[i] = contentControls.items[i].onDataChanged.add(contentControlDataChanged);        contentControls.items[i].track();      }      await context.sync();      console.log(\"Added event handlers for when data is changed in content controls.\");    }  });}async function contentControlDataChanged(event: Word.ContentControlDataChangedEventArgs) {  await Word.run(async (context) => {    console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`);    console.log(event.ids);  });} let eventContexts = [];async function registerOnDeletedEventHandlers() {  await Word.run(async (context) => {    const contentControls = context.document.contentControls;    contentControls.load(\"items\");    await context.sync();    // Register the onDeleted event handler on each content control.    if (contentControls.items.length === 0) {      console.log(\"There aren't any content controls in this document so can't register event handlers.\");    } else {      for (let i = 0; i < contentControls.items.length; i++) {        eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);        contentControls.items[i].track();      }      await context.sync();      console.log(\"Added event handlers for when content controls are deleted.\");    }  });}async function contentControlDeleted(event: Word.ContentControlDeletedEventArgs) {  await Word.run(async (context) => {    console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);    console.log(event.ids);  });}"
    }
  ]
}