{
	"Templates": [
		{
			"Description": "This sample demonstrates how to insert content controls in a Word document, how to modify content controls' properties, and how to insert nested content controls. It also shows how to register event handlers for content control events such as onDataChanged, onDeleted, and onContentControlAdded.",
			"SampleCodes": "async function insertContentControls() {\n  // Traverses each paragraph of the document and wraps a content control on each with either a even or odd tags.\n  await Word.run(async (context) => {\n    let paragraphs = context.document.body.paragraphs;\n    paragraphs.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n\n    await context.sync();\n\n    for (let i = 0; i < paragraphs.items.length; i++) {\n      let contentControl = paragraphs.items[i].insertContentControl();\n      // For even, tag \"even\".\n      if (i % 2 === 0) {\n        contentControl.tag = \"even\";\n      } else {\n        contentControl.tag = \"odd\";\n      }\n    }\n    console.log(\"Content controls inserted: \" + paragraphs.items.length);\n\n    await context.sync();\n  });\n}\n\nasync function modifyContentControls() {\n  // Adds title and colors to odd and even content controls and changes their appearance.\n  await Word.run(async (context) => {\n    // Get the complete sentence (as range) associated with the insertion point.\n    let evenContentControls = context.document.contentControls.getByTag(\"even\");\n    let oddContentControls = context.document.contentControls.getByTag(\"odd\");\n    evenContentControls.load(\"length\");\n    oddContentControls.load(\"length\");\n\n    await context.sync();\n\n    for (let i = 0; i < evenContentControls.items.length; i++) {\n      // Change a few properties and append a paragraph\n      evenContentControls.items[i].set({\n        color: \"red\",\n        title: \"Odd ContentControl #\" + (i + 1),\n        appearance: Word.ContentControlAppearance.tags\n      });\n      evenContentControls.items[i].insertParagraph(\"This is an odd content control\", \"End\");\n    }\n\n    for (let j = 0; j < oddContentControls.items.length; j++) {\n      // Change a few properties and append a paragraph\n      oddContentControls.items[j].set({\n        color: \"green\",\n        title: \"Even ContentControl #\" + (j + 1),\n        appearance: \"Tags\"\n      });\n      oddContentControls.items[j].insertHtml(\"This is an <b>even</b> content control\", \"End\");\n    }\n\n    await context.sync();\n  });\n}\n\nasync function insertNestedContentControls() {\n  // Insert nested content controls. First insert a content control. Then insert a parent content control on it.\n  await Word.run(async (context) => {\n    let paragraph = context.document.body.paragraphs.getFirst();\n    paragraph.load(\"$none\"); // Don't need any properties; just wrap each paragraph with a content control.\n    await context.sync();\n\n    // insert a content control in the first paragraph.\n    let contentControl = paragraph.insertContentControl();\n    await context.sync();\n\n    // / Insert a parent content control on the content control. This can also be considered as inserting nested content control.\n    let parentContentControl = contentControl.getRange().insertContentControl();\n    await context.sync();\n\n    // load all content controls\n    let contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // change the content control color, title and appearance\n    for (let i = 0; i < contentControls.items.length; i++) {\n      contentControls.items[i].set({\n        color: \"green\",\n        title: \"contentControl #\" + (i + 1),\n        appearance: \"Tags\"\n      });\n    }\n    await context.sync();\n  });\n}\n\nlet onAddedEventContext;\n\nasync function registerOnAddedEventHandler() {\n  // Registers the onAdded event handler on the document.\n  await Word.run(async (context) => {\n    onAddedEventContext = context.document.onContentControlAdded.add(contentControlAdded);\n    await context.sync();\n\n    console.log(\"Added event handler for when content controls are added.\");\n  });\n}\n\nasync function contentControlAdded(event: Word.ContentControlAddedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were added:`);\n    console.log(event.ids);\n  });\n}\n\nasync function deregisterOnAddedEventHandler() {\n  await Word.run(onAddedEventContext.context, async (context) => {\n    onAddedEventContext.remove();\n    await context.sync();\n  });\n\n  onAddedEventContext = null;\n  console.log(\"Removed event handler that was tracking when content controls are added.\");\n}\n\nlet eventContexts = [];\n\nasync function registerOndeletedEventHandlers() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // Register the onDeleted event handler on each content control.\n    if (contentControls.items.length === 0) {\n      console.log(\"There aren't any content controls in this document so can't register event handlers.\");\n    } else {\n      for (let i = 0; i < contentControls.items.length; i++) {\n        eventContexts[i] = contentControls.items[i].onDeleted.add(contentControlDeleted);\n        contentControls.items[i].track();\n      }\n\n      await context.sync();\n\n      console.log(\"Added event handlers for when content controls are deleted.\");\n    }\n  });\n}\n\nasync function contentControlDeleted(event: Word.ContentControlDeletedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls that were deleted:`);\n    console.log(event.ids);\n  });\n}\n\nasync function deleteContentControl() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls.getByTag(\"forTesting\");\n    contentControls.load(\"items\");\n    await context.sync();\n\n    if (contentControls.items.length === 0) {\n      console.log(\"There are no content controls in this document.\");\n    } else {\n      console.log(\"Control to be deleted:\");\n      console.log(contentControls.items[0]);\n      contentControls.items[0].delete(false);\n      await context.sync();\n    }\n  });\n}\n\nasync function deregisterOndeletedEventHandlers() {\n  await Word.run(async (context) => {\n    for (let i = 0; i < eventContexts.length; i++) {\n      await Word.run(eventContexts[i].context, async (context) => {\n        eventContexts[i].remove();\n      });\n    }\n\n    await context.sync();\n\n    eventContexts = [];\n    console.log(\"Removed event handlers that were tracking when content controls are deleted.\");\n  });\n}\n\nasync function registerOndataChangedEventHandlers() {\n  await Word.run(async (context) => {\n    const contentControls = context.document.contentControls;\n    contentControls.load(\"items\");\n    await context.sync();\n\n    // Register the onDataChanged event handler on each content control.\n    if (contentControls.items.length === 0) {\n      console.log(\"There aren't any content controls in this document so can't register event handlers.\");\n    } else {\n      for (let i = 0; i < contentControls.items.length; i++) {\n        eventContexts[i] = contentControls.items[i].onDataChanged.add(contentControlDataChanged);\n        contentControls.items[i].track();\n      }\n\n      await context.sync();\n\n      console.log(\"Added event handlers for when data is changed in content controls.\");\n    }\n  });\n}\n\nasync function contentControlDataChanged(event: Word.ContentControlDataChangedEventArgs) {\n  await Word.run(async (context) => {\n    console.log(`${event.eventType} event detected. IDs of content controls where data was changed:`);\n    console.log(event.ids);\n  });\n}"
		}
	]
}