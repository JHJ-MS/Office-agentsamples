{
    "Templates": [
      {
        "Description": "These APIs are related to annotation, critique APIs, including but not limited to: register paragraph events, insert annotations, get annotations, accept/reject annotations, delete annotations, and deregister paragraph events.",
        "SampleCodes": "//Annotations, critique, paragraph Events APIs require Word JavaScript Api 1.7 or above.\nlet eventContexts = [];\n\nasync function registerEventHandlers() {\n  // Registers event handlers.\n  await Word.run(async (context) => {\n    eventContexts[0] = context.document.onParagraphAdded.add(paragraphChanged);\n    eventContexts[1] = context.document.onParagraphChanged.add(paragraphChanged);\n\n    eventContexts[2] = context.document.onAnnotationClicked.add(onClickedHandler);\n    eventContexts[3] = context.document.onAnnotationHovered.add(onHoveredHandler);\n    eventContexts[4] = context.document.onAnnotationInserted.add(onInsertedHandler);\n    eventContexts[5] = context.document.onAnnotationRemoved.add(onRemovedHandler);\n\n    await context.sync();\n\n    console.log(\"Event handlers registered.\");\n  });\n}\n\nasync function paragraphChanged(args: Word.ParagraphChangedEventArgs) {\n  await Word.run(async (context) => {\n    const results = [];\n    for (let id of args.uniqueLocalIds) {\n      let para = context.document.getParagraphByUniqueLocalId(id);\n      para.load(\"uniqueLocalId\");\n\n      results.push({ para: para, text: para.getText() });\n    }\n\n    await context.sync();\n\n    for (let result of results) {\n      console.log(`${args.type}: ${result.para.uniqueLocalId} - ${result.text.value}`);\n    }\n  });\n}\n\nasync function insertAnnotations() {\n  // Adds annotations to the selected paragraph.\n  await Word.run(async (context) => {\n    const paragraph = context.document.getSelection().paragraphs.getFirst();\n    const critique1 = {\n      colorScheme: Word.CritiqueColorScheme.red,\n      start: 1,\n      length: 3\n    };\n    const critique2 = {\n      colorScheme: Word.CritiqueColorScheme.green,\n      start: 6,\n      length: 1\n    };\n    const critique3 = {\n      colorScheme: Word.CritiqueColorScheme.blue,\n      start: 10,\n      length: 3\n    };\n    const critique4 = {\n      colorScheme: Word.CritiqueColorScheme.lavender,\n      start: 14,\n      length: 3\n    };\n    const critique5 = {\n      colorScheme: Word.CritiqueColorScheme.berry,\n      start: 18,\n      length: 10\n    };\n    const annotationSet: Word.AnnotationSet = {\n      critiques: [critique1, critique2, critique3, critique4, critique5]\n    };\n\n    const annotationIds = paragraph.insertAnnotations(annotationSet);\n\n    await context.sync();\n\n    console.log(\"Annotations inserted:\", annotationIds.value);\n  });\n}\n\nasync function getAnnotations() {\n  // Gets annotations found in the selected paragraph.\n  await Word.run(async (context) => {\n    const paragraph = context.document.getSelection().paragraphs.getFirst();\n    const annotations = paragraph.getAnnotations();\n    annotations.load(\"id,state,critiqueAnnotation\");\n\n    await context.sync();\n\n    console.log(\"Annotations found:\");\n\n    for (var i = 0; i < annotations.items.length; i++) {\n      const annotation = annotations.items[i];\n\n      console.log(`${annotation.id} - ${annotation.state} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);\n    }\n  });\n}\n\nasync function acceptFirst() {\n  // Accepts the first annotation found in the selected paragraph.\n  await Word.run(async (context) => {\n    const paragraph = context.document.getSelection().paragraphs.getFirst();\n    const annotations = paragraph.getAnnotations();\n    annotations.load(\"id,state,critiqueAnnotation\");\n\n    await context.sync();\n\n    for (var i = 0; i < annotations.items.length; i++) {\n      const annotation = annotations.items[i];\n\n      if (annotation.state === Word.AnnotationState.created) {\n        console.log(`Accepting ${annotation.id}`);\n        annotation.critiqueAnnotation.accept();\n\n        await context.sync();\n        break;\n      }\n    }\n  });\n}\n\nasync function rejectLast() {\n  // Rejects the last annotation found in the selected paragraph.\n  await Word.run(async (context) => {\n    const paragraph = context.document.getSelection().paragraphs.getFirst();\n    const annotations = paragraph.getAnnotations();\n    annotations.load(\"id,state,critiqueAnnotation\");\n\n    await context.sync();\n\n    for (var i = annotations.items.length - 1; i >= 0; i--) {\n      const annotation = annotations.items[i];\n\n      if (annotation.state === Word.AnnotationState.created) {\n        console.log(`Rejecting ${annotation.id}`);\n        annotation.critiqueAnnotation.reject();\n\n        await context.sync();\n        break;\n      }\n    }\n  });\n}\n\nasync function deleteAnnotations() {\n  // Deletes all annotations found in the selected paragraph.\n  await Word.run(async (context) => {\n    const paragraph = context.document.getSelection().paragraphs.getFirst();\n    const annotations = paragraph.getAnnotations();\n    annotations.load(\"id\");\n\n    await context.sync();\n\n    const ids = [];\n    for (var i = 0; i < annotations.items.length; i++) {\n      const annotation = annotations.items[i];\n\n      ids.push(annotation.id);\n      annotation.delete();\n    }\n\n    await context.sync();\n\n    console.log(\"Annotations deleted:\", ids);\n  });\n}\n\nasync function onClickedHandler(args: Word.AnnotationClickedEventArgs) {\n  await Word.run(async (context) => {\n    const annotation = context.document.getAnnotationById(args.id);\n    annotation.load(\"critiqueAnnotation\");\n\n    await context.sync();\n\n    console.log(`AnnotationClicked: ${args.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);\n  });\n}\n\nasync function onHoveredHandler(args: Word.AnnotationHoveredEventArgs) {\n  await Word.run(async (context) => {\n    const annotation = context.document.getAnnotationById(args.id);\n    annotation.load(\"critiqueAnnotation\");\n\n    await context.sync();\n\n    console.log(`AnnotationHovered: ${args.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);\n  });\n}\n\nasync function onInsertedHandler(args: Word.AnnotationInsertedEventArgs) {\n  await Word.run(async (context) => {\n    const annotations = [];\n    for (let i = 0; i < args.ids.length; i++) {\n      let annotation = context.document.getAnnotationById(args.ids[i]);\n      annotation.load(\"id,critiqueAnnotation\");\n\n      annotations.push(annotation);\n    }\n\n    await context.sync();\n\n    for (let annotation of annotations) {\n      console.log(`AnnotationInserted: ${annotation.id} - ${JSON.stringify(annotation.critiqueAnnotation.critique)}`);\n    }\n  });\n}\n\nasync function onRemovedHandler(args: Word.AnnotationRemovedEventArgs) {\n  await Word.run(async (context) => {\n    for (let id of args.ids) {\n      console.log(`AnnotationRemoved: ${id}`);\n    }\n  });\n}\n\nasync function deregisterEventHandlers() {\n  // Deregisters event handlers.\n  await Word.run(async (context) => {\n    for (let i = 0; i < eventContexts.length; i++) {\n      await Word.run(eventContexts[i].context, async (context) => {\n        eventContexts[i].remove();\n      });\n    }\n\n    await context.sync();\n\n    eventContexts = [];\n    console.log(\"Removed event handlers.\");\n  });\n}\n\nasync function setup() {\n  await Word.run(async (context) => {\n    const body = context.document.body;\n    body.clear();\n    body.insertParagraph(\n      \"Video provides a powerful way to help you prove your point. When you click Online Video, you can paste in the embed code for the video you want to add. You can also type a keyword to search online for the video that best fits your document.\",\n      \"Start\"\n    );\n    body.insertParagraph(\n      \"To make your document look professionally produced, Word provides header, footer, cover page, and text box designs that complement each other. For example, you can add a matching cover page, header, and sidebar. Click Insert and then choose the elements you want from the different galleries.\",\n      \"End\"\n    );\n  });\n}\n\n// Default helper for invoking an action and handling errors.\nasync function tryCatch(callback) {\n  try {\n    await callback();\n  } catch (error) {\n    // Note: In a production add-in, you'd want to notify the user through your add-in's UI.\n    console.error(error);\n  }\n}\n"
      }
    ]
  }