{
  "Templates": [
    {
      "Description": "Creates, modify and delete a pivotTable ( pivot ). Remove a row, data hierarchies to a pivotTable ( pivot ). Sets layout settings through the PivotLayout.",
      "SampleCodes": "async function createPivotTable() {\n  await Excel.run(async (context) => {\n    const rangeToAnalyze = context.workbook.worksheets.getItem(\"Data\").getRange(\"A1:E21\");\n    const rangeToPlacePivot = context.workbook.worksheets.getItem(\"Pivot\").getRange(\"A2\");\n    context.workbook.worksheets.getItem(\"Pivot\").pivotTables.add(\"Farm Sales\", rangeToAnalyze, rangeToPlacePivot);\n\n    await context.sync();\n  });\n}\n\nasync function addRowToPivotTable() {\n  await Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // Check if the PivotTable already has rows.\n    const farmRow = pivotTable.rowHierarchies.getItemOrNullObject(\"Farm\");\n    pivotTable.rowHierarchies.load();\n    await context.sync();\n\n    if (farmRow.isNullObject) {\n    // Add the row \"Farm\" to pivotTable\n      pivotTable.rowHierarchies.add(pivotTable.hierarchies.getItem(\"Farm\"));\n    }\n\n    await context.sync();\n  });\n}\n\nasync function addDataHierarchiesToPivotTable() {\n  await Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold at Farm\"));\n    pivotTable.dataHierarchies.add(pivotTable.hierarchies.getItem(\"Crates Sold Wholesale\"));\n\n    await context.sync();\n  });\n}\n\nasync function removeRowFromPivotTable() {\n  await Excel.run(async (context) => {\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // Check if the PivotTable already has rows.\n    const farmRow = pivotTable.rowHierarchies.getItemOrNullObject(\"Farm\");\n    pivotTable.rowHierarchies.load();\n    await context.sync();\n\n   if (!farmRow.isNullObject) {\n    // remove the row \"farmRow\" from pivotTable\n      pivotTable.rowHierarchies.remove(farmRow);\n    }\n    await context.sync();\n  });\n}\n\nasync function deletePivotTable() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets\n      .getItem(\"Pivot\")\n      .pivotTables.getItem(\"Farm Sales\")\n      .delete();\n\n    await context.sync();\n  });\n}\n\nasync function changeLayout() {\n  await Excel.run(async (context) => {\n    // Change the PivotLayout.type to a new type.\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.layout.load(\"layoutType\");\n    await context.sync();\n\n    // Cycle between the three layout types.\n    if (pivotTable.layout.layoutType === \"Compact\") {\n      pivotTable.layout.layoutType = \"Outline\";\n    } else if (pivotTable.layout.layoutType === \"Outline\") {\n      pivotTable.layout.layoutType = \"Tabular\";\n    } else {\n      pivotTable.layout.layoutType = \"Compact\";\n    }\n\n    await context.sync();\n    console.log(\"Pivot layout is now \" + pivotTable.layout.layoutType);\n  });\n}\n\nasync function repeatItemLabels() {\n  await Excel.run(async (context) => {\n    // Repeat the PivotItem labels for each row used by another level of the row hierarchy.\n    const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n    const pivotLayout = pivotTable.layout;\n\n    pivotLayout.repeatAllItemLabels(true);\n    console.log(\"Setting `PivotLayout.repeatAllItemLabels` to true.\");\n\n    await context.sync();\n  });\n}\n\nasync function toggleFieldHeaders() {\n  await Excel.run(async (context) => {\n    // Turn the field headers on and off for the row and column hierarchies.\n    const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n    const pivotLayout = pivotTable.layout;\n    pivotLayout.load(\"showFieldHeaders\");\n    await context.sync();\n\n    let showHeaders = !pivotLayout.showFieldHeaders;\n    console.log(`Show field headers? - ${showHeaders}`);\n    pivotLayout.showFieldHeaders = showHeaders;\n    await context.sync();\n  });\n}\n\nasync function toggleGrandTotals() {\n  await Excel.run(async (context) => {\n    // Turn the grand totals on and off for the rows and columns.\n    const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n    const pivotLayout = pivotTable.layout;\n\n    pivotLayout.load([\"showRowGrandTotals\", \"showColumnGrandTotals\"]);\n    await context.sync();\n\n    let showColumnTotals = !pivotLayout.showColumnGrandTotals;\n    let showRowTotals = !pivotLayout.showRowGrandTotals;\n    console.log(`Show column grand totals? - ${showColumnTotals}`);\n    console.log(`Show row grand totals? - ${showRowTotals}`);\n\n    pivotLayout.showColumnGrandTotals = showColumnTotals;\n    pivotLayout.showRowGrandTotals = showRowTotals;\n\n    await context.sync();\n  });\n}\n\nasync function setEmptyCellText() {\n  await Excel.run(async (context) => {\n    // Set a default value for an empty cell in the PivotTable. This doesn't include cells left blank by the layout.\n    const pivotTable = context.workbook.pivotTables.getItem(\"Farm Sales\");\n    const pivotLayout = pivotTable.layout;\n\n    pivotLayout.emptyCellText = \"--\";\n\n    // Set the text alignment to match the rest of the PivotTable.\n    pivotLayout.getDataBodyRange().format.horizontalAlignment = Excel.HorizontalAlignment.right;\n    await context.sync();\n  });\n}"
    }
  ]
}