 {
	"Templates": [
		{
			"Description": "Use cultureInfo to normalize data. Display culture settings, write culturally ( cultural ) consistent decimal.",
			"SampleCodes": "async function displayCultureInfo() {\n  await Excel.run(async (context) => {\n    context.application.load(\"decimalSeparator,thousandsSeparator\");\n    context.application.cultureInfo.numberFormat.load(\"numberDecimalSeparator,numberGroupSeparator\");\n    await context.sync();\n\n    // Local settings are set under the \"Options > Advanced\" menu.\n    const localDecimalSeparator = context.application.decimalSeparator;\n    const localThousandsSeparator = context.application.thousandsSeparator;\n\n    const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;\n    const systemThousandsSeparator = context.application.cultureInfo.numberFormat.numberGroupSeparator;\n\n    console.log(\"Local character settings: \");\n    console.log(`  Local decimal separator: ${localDecimalSeparator}`);\n    console.log(`  Local thousands separator: ${localThousandsSeparator}`);\n\n    console.log(\"System culture settings: \");\n    console.log(`  System decimal separator: ${systemDecimalSeparator}`);\n    console.log(`  System thousands separator: ${systemThousandsSeparator}`);\n    console.log(`  `);\n\n    await context.sync();\n  });\n}\n\nasync function writeDecimal() {\n  // This will convert a number like \"14,37\" to \"14.37\"\n  // (assuming the system decimal separator is \".\").\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const decimalSource = sheet.getRange(\"B2\");\n    decimalSource.load(\"values\");\n    context.application.cultureInfo.numberFormat.load(\"numberDecimalSeparator\");\n    await context.sync();\n\n    const systemDecimalSeparator = context.application.cultureInfo.numberFormat.numberDecimalSeparator;\n    const oldDecimalString: string = decimalSource.values[0][0];\n\n    // This assumes the input column is standardized to use \",\" as the decimal separator.\n    const newDecimalString = oldDecimalString.replace(\",\", systemDecimalSeparator);\n\n    const resultRange = sheet.getRange(\"C2\");\n    resultRange.values = [[newDecimalString]];\n    resultRange.format.autofitColumns();\n    await context.sync();\n  });\n}"
		}
	]
}

