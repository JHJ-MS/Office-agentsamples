{
	"Templates": [
    {
        "Description": "Excel Table sample codes including creating a table, add rows or columns to a table, get data from a table.",
        "SampleCodes": "/** Create a new table with sample data */\nasync function setup() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    const expensesTable = sheet.tables.add(\"A1:D1\", true /*hasHeaders*/);\n    expensesTable.name = \"ExpensesTable\";\n    expensesTable.getHeaderRowRange().values = [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n\n    expensesTable.rows.add(null /*add at the end*/, [\n      [\"1/1/2017\", \"The Phone Company\", \"Communications\", \"$120\"],\n      [\"1/2/2017\", \"Northwind Electric Cars\", \"Transportation\", \"$142\"],\n      [\"1/5/2017\", \"Best For You Organics Company\", \"Groceries\", \"$27\"],\n      [\"1/10/2017\", \"Coho Vineyard\", \"Restaurant\", \"$33\"],\n      [\"1/11/2017\", \"Bellows College\", \"Education\", \"$350\"],\n      [\"1/15/2017\", \"Trey Research\", \"Other\", \"$135\"],\n      [\"1/15/2017\", \"Best For You Organics Company\", \"Groceries\", \"$97\"]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    sheet.activate();\n    await context.sync();\n  });\n}\n\nasync function addColumn() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    //columns.add can only add one column per time. Need to invoke it multiple times to add multiple columns.\n    expensesTable.columns.add(null, [\n      [\"Deductable?\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"],\n      [\"No\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"]\n    ]);\n\n    expensesTable.columns.add(null, [\n      [\"Avaliable?\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"],\n      [\"No\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"],\n      [\"Yes\"],\n      [\"Yes\"],\n      [\"No\"]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    await context.sync();\n  });\n}\n\nasync function addRow() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    expensesTable.rows.add(null, [\n      [\"1/16/2017\", \"THE PHONE COMPANY\", \"Communications\", \"$120\"],\n      [\"1/20/2017\", \"NORTHWIND ELECTRIC CARS\", \"Transportation\", \"$142\"],\n      [\"1/20/2017\", \"BEST FOR YOU ORGANICS COMPANY\", \"Groceries\", \"$27\"]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    await context.sync();\n  });\n}\n\nasync function getData() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    const headerRange = expensesTable.getHeaderRowRange().load(\"values\");\n    const bodyRange = expensesTable.getDataBodyRange().load(\"values\");\n    const columnRange = expensesTable.columns\n      .getItem(\"MERCHANT\")\n      .getDataBodyRange()\n      .load(\"values\");\n    const rowRange = expensesTable.rows.getItemAt(1).load(\"values\");\n\n    await sheet.context.sync();\n\n    const headerValues = headerRange.values;\n    const bodyValues = bodyRange.values;\n    const merchantColumnValues = columnRange.values;\n    const secondRowValues = rowRange.values;\n\n    sheet.getRange(\"A18:A18\").values = [[\"Results\"]];\n    sheet.getRange(\"A20:D20\").values = headerValues;\n    sheet.getRange(\"A21:D27\").values = bodyValues;\n    sheet.getRange(\"B30:B36\").values = merchantColumnValues;\n    sheet.getRange(\"A17:D17\").values = secondRowValues;\n\n    await context.sync();\n  });\n}"
    }
	]
}