{
  "Templates": [
    {
      "Description": "Apply filter to a PivotTable ( pivot ), ( value, label, clear filter ). Get the data source address, data values of a pivotTable ( pivot )",
      "SampleCodes": "async function valueFilter() {\n  await Excel.run(async (context) => {\n    // Add a PivotFilter to filter on the values correlated with a row.\n\n    // Get the PivotTable.\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // Get the \"Farm\" field.\n    const field = pivotTable.hierarchies.getItem(\"Farm\").fields.getItem(\"Farm\");\n\n    // Filter to only include rows with more than 500 wholesale crates sold.\n    const filter: Excel.PivotValueFilter = {\n      condition: Excel.ValueFilterCondition.greaterThan,\n      comparator: 500,\n      value: \"Sum of Crates Sold Wholesale\"\n    };\n\n    // Apply the value filter to the field.\n    field.applyFilter({ valueFilter: filter });\n\n    await context.sync();\n  });\n}\n\nasync function labelFilter() {\n  await Excel.run(async (context) => {\n    // Add a PivotFilter to filter based on the strings of item labels.\n\n    // Get the PivotTable.\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n\n    // Get the \"Type\" field.\n    const field = pivotTable.hierarchies.getItem(\"Type\").fields.getItem(\"Type\");\n\n    // Filter out any types that start with \"L\" (\"Lemons\" and \"Limes\" in this case).\n    const filter: Excel.PivotLabelFilter = {\n      condition: Excel.LabelFilterCondition.beginsWith,\n      substring: \"L\",\n      exclusive: true\n    };\n\n    // Apply the label filter to the field.\n    field.applyFilter({ labelFilter: filter });\n\n    await context.sync();\n  });\n}\n\nasync function clearFilters() {\n  await Excel.run(async (context) => {\n    // Clear all the PivotFilters.\n\n    // Get the PivotTable.\n    const pivotTable = context.workbook.worksheets.getActiveWorksheet().pivotTables.getItem(\"Farm Sales\");\n    pivotTable.hierarchies.load(\"name\");\n    await context.sync();\n\n    // Clear the filters on each PivotField.\n    pivotTable.hierarchies.items.forEach((hierarchy) => {\n      hierarchy.fields.getItem(hierarchy.name).clearAllFilters();\n    });\n    await context.sync();\n  });\n}\n\nasync function getPivotTableDataSourceAddress() {\n  // This function logs the data source of a PivotTable.\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getItem(\"TotalPivot\");\n    const pivotTable = worksheet.pivotTables.getItem(\"All Farm Sales\");\n\n    // Retrieve the type and string representation of the data source address of the PivotTable.\n    const pivotTableDataSourceType = pivotTable.getDataSourceType();\n    const pivotTableDataSourceString = pivotTable.getDataSourceString();\n    await context.sync();\n\n    // Log the data source information.\n    console.log(\"Data source: \" + pivotTableDataSourceString.value);\n    console.log(\"Source type: \" + pivotTableDataSourceType.value);\n  });\n  \n// Get the data values of the first pivoTable in the current worksheet.\nasync function getPivotTableDataInWorksheet() {\n  await Excel.run(async (context) => {\n    const pivotTables = context.workbook.worksheets.getActiveWorksheet().pivotTables;\n    pivotTables.load(\"items\");\n    await context.sync();\n\n    const firstPivotTable = pivotTables.items[0];\n    firstPivotTable.load(\"layout\");\n    await context.sync();\n\n	// Get the range of the pivoTable\n    const pivotLayout = firstPivotTable.layout;\n    const pivotTableRange = pivotLayout.getRange();\n    pivotTableRange.load(\"values\");\n    await context.sync();\n	\n	// Get the values of the range\n    const pivotTableValues = pivotTableRange.values;\n    await context.sync();\n    console.log(\"values: \"+ pivotTableValues);\n  });\n}\n\n// Get all pivoTable's names in the workbook\nasync function getPivotTableNamesInWorkbook() {\n  await Excel.run(async (context) => {\n    // Get the names of all the PivotTables in the workbook.\n    const pivotTables = context.workbook.pivotTables;\n    pivotTables.load(\"name\");\n    await context.sync();\n\n    // Display the names in the console.\n    console.log(\"PivotTables in the workbook:\");\n    pivotTables.items.forEach((pivotTable) => {\n      console.log(`\t${pivotTable.name}`);\n    });\n  });\n}"
    }
  ]
}