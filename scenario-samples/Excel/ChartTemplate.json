{
	"Templates": [
		{
			"Description": "Create a chart, change the chart type and format the chart",
			"SampleCodes": "enum ChartType\n{\ninvalid,\ncolumnClustered,\ncolumnStacked,\ncolumnStacked100,\n_3DColumnClustered,\n_3DColumnStacked,\n_3DColumnStacked100,\nbarClustered,\nbarStacked,\nbarStacked100,\n_3DBarClustered,\n_3DBarStacked,\n_3DBarStacked100,\nlineStacked,\nlineStacked100,\nlineMarkers,\nlineMarkersStacked,\nlineMarkersStacked100,\npieOfPie,\npieExploded,\n_3DPieExploded,\nbarOfPie,\nxYScatterSmooth,\nxYScatterSmoothNoMarkers,\nxYScatterLines,\nxYScatterLinesNoMarkers,\nareaStacked,\nareaStacked100,\n_3DAreaStacked,\n_3DAreaStacked100,\ndoughnutExploded,\nradarMarkers,\nradarFilled,\nsurface,\nsurfaceWireframe,\nsurfaceTopView,\nsurfaceTopViewWireframe,\nbubble,\nbubble3DEffect,\nstockHLC,\nstockOHLC,\nstockVHLC,\nstockVOHLC,\ncylinderColClustered,\ncylinderColStacked,\ncylinderColStacked100,\ncylinderBarClustered,\ncylinderBarStacked,\ncylinderBarStacked100,\ncylinderCol,\nconeColClustered,\nconeColStacked,\nconeColStacked100,\nconeBarClustered,\nconeBarStacked,\nconeBarStacked100,\nconeCol,\npyramidColClustered,\npyramidColStacked,\npyramidColStacked100,\npyramidBarClustered,\npyramidBarStacked,\npyramidBarStacked100,\npyramidCol,\n_3DColumn,\nline,\n_3DLine,\n_3DPie,\npie,\nxYScatter,\n_3DArea,\narea,\ndoughnut,\nradar,\nhistogram,\nboxwhisker,\npareto,\nregionMap,\ntreemap,\nwaterfall,\nsunburst,\nfunnel,\n};\n\nasync function createBubbleChart() {\n  await Excel.run(async (context) => {\n    /*\n      The table is expected to look like this:\n      Product, Inventory, Price, Current Market Share\n      Calamansi, 2000, $2.45, 10%\n      ...\n\n      We want each bubble to represent a single row.\n    */\n\n    // Get the worksheet and table data.\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"Sales\");\n    const dataRange = table.getDataBodyRange();\n\n    // Get the table data without the row names.\n    const valueRange = dataRange.getOffsetRange(0, 1).getResizedRange(0, -1);\n\n    // Create the chart.\n    const bubbleChart = sheet.charts.add(Excel.ChartType.bubble, valueRange);\n    bubbleChart.name = \"Product Chart\";\n\n    // Remove the default series, since we want a unique series for each row.\n    bubbleChart.series.getItemAt(0).delete();\n\n    // Load the data necessary to make a chart series.\n    dataRange.load([\"rowCount\", \"values\"]);\n    await context.sync();\n\n    // For each row, create a chart series (a bubble).\n    for (let i = 0; i < dataRange.rowCount; i++) {\n      const newSeries = bubbleChart.series.add(dataRange.values[i][0], i);\n      newSeries.setXAxisValues(dataRange.getCell(i, 1));\n      newSeries.setValues(dataRange.getCell(i, 2));\n      newSeries.setBubbleSizes(dataRange.getCell(i, 3));\n\n      // Show the product name and market share percentage.\n      newSeries.dataLabels.showSeriesName = true;\n      newSeries.dataLabels.showBubbleSize = true;\n      newSeries.dataLabels.showValue = false;\n    }\n\n    await context.sync();\n  });\n}\n\nasync function getChartSeriesDimensionValues() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // The sample chart is of type `Excel.ChartType.bubble`.\n    const bubbleChart = sheet.charts.getItem(\"Product Chart\");\n\n    // Get the first series in the chart.\n    const firstSeries = bubbleChart.series.getItemAt(0);\n\n    // Get the values for the dimensions we're interested in.\n    const bubbleSize = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.bubbleSizes);\n    const xValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.xvalues);\n    const yValues = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.yvalues);\n    const category = firstSeries.getDimensionValues(Excel.ChartSeriesDimension.categories);\n\n    await context.sync();\n\n    // Log the information.\n    console.log(`Series ${category.value} - X:${xValues.value},Y:${yValues.value},Bubble:${bubbleSize.value}`);\n  });\n}\n\nasync function changeTitleFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const title = sheet.charts.getItemAt(0).title;\n    title.format.fill.setSolidColor(\"SkyBlue\");\n    title.format.border.lineStyle = \"Dash\";\n\n    await context.sync();\n  });\n}\n\nasync function changeTitleSubstring() {\n  await Excel.run(async (context) => {\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    let chart = sheet.charts.getItemAt(0);\n\n    // Get first seven characters of the title and color them green.\n    chart.title.getSubstring(0, 7).font.color = \"Yellow\";\n    await context.sync();\n  });\n}\n\nasync function changeTitleOrientation() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const title = sheet.charts.getItemAt(0).title;\n    title.textOrientation = -45;\n\n    await context.sync();\n  });\n}\n\nasync function addTitleShadow() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const title = sheet.charts.getItemAt(0).title;\n    title.format.font.size = 16;\n    title.showShadow = true;\n\n    await context.sync();\n  });\n}"
		}
	]
}