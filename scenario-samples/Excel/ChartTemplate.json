{
	"Templates": [
		{
			"Description": "Create charts by types. Formats labels and lines of chart, the legend's font. Deletes series in a chart.",
			"SampleCodes": "enum ChartType {\n    columnClustered = \"ColumnClustered\",\n    columnStacked = \"ColumnStacked\",\n    _3DColumnClustered = \"3DColumnClustered\",\n    barClustered = \"BarClustered\",\n    barStacked = \"BarStacked\",\n    barStacked100 = \"BarStacked100\",\n    _3DBarClustered = \"3DBarClustered\",\n    _3DBarStacked = \"3DBarStacked\",\n    lineStacked = \"LineStacked\",\n    pieOfPie = \"PieOfPie\",\n    pieExploded = \"PieExploded\",\n    _3DPieExploded = \"3DPieExploded\",\n    barOfPie = \"BarOfPie\",\n    areaStacked = \"AreaStacked\",\n    _3DAreaStacked = \"3DAreaStacked\",\n    doughnutExploded = \"DoughnutExploded\",\n    radarMarkers = \"RadarMarkers\",\n    radarFilled = \"RadarFilled\",\n    surface = \"Surface\",\n    surfaceWireframe = \"SurfaceWireframe\",\n    surfaceTopView = \"SurfaceTopView\",\n    bubble = \"Bubble\",\n    bubble3DEffect = \"Bubble3DEffect\",\n    stockHLC = \"StockHLC\",\n    stockVHLC = \"StockVHLC\",\n    coneCol = \"ConeCol\",\n    pyramidColClustered = \"PyramidColClustered\",\n    pyramidColStacked = \"PyramidColStacked\",\n    pyramidBarStacked = \"PyramidBarStacked\",\n    pyramidCol = \"PyramidCol\",\n    _3DColumn = \"3DColumn\",\n}\n\n\nasync function formatChart() {\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();\n    const chart = worksheet.charts.getItem(\"SlopeChart\");\n\n    chart.axes.valueAxis.tickLabelPosition = \"None\";\n    chart.plotArea.width = 800;\n    chart.plotArea.left = 80;\n\n    chart.title.format.font.size = 14.4;\n    chart.title.text = \"Contoso Bike Parts - 2018\";\n    chart.title.format.font.name = \"Times New Roman\";\n    chart.title.format.font.color = \"#D9D9D9\";\n\n    chart.legend.format.font.name = \"Times New Roman\";\n    chart.legend.format.font.color = \"#D9D9D9\";\n\n    chart.axes.categoryAxis.format.font.name = \"Times New Roman\";\n    chart.axes.categoryAxis.format.font.color = \"#D9D9D9\";\n    chart.axes.valueAxis.majorGridlines.format.line.color = \"#585858\";\n    chart.format.fill.setSolidColor(\"#404040\");\n    await context.sync();\n  });\n}\n\nasync function dataLabels() {\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();\n    const chart = worksheet.charts.getItem(\"SlopeChart\");\n    chart.series.load(\"count\");\n    await context.sync();\n    let pointsLoaded = -1;\n    for (let i = 0; i < chart.series.count; i++) {\n      const series = chart.series.getItemAt(i);\n      series.hasDataLabels = true;\n      series.markerSize = 20;\n\n      series.markerBackgroundColor = \"#404040\";\n      series.markerForegroundColor = \"#404040\";\n\n      // there are an equal number of points in each series, so we only want to load and sync once\n      if (pointsLoaded < 0) {\n        series.points.load(\"count\");\n        await context.sync();\n        pointsLoaded = series.points.count;\n      }\n\n      for (let j = 0; j < pointsLoaded; j++) {\n        // the colors assume \"Format chart\" has been pressed\n        series.points.getItemAt(j).markerBackgroundColor = \"#404040\";\n        series.points.getItemAt(j).markerForegroundColor = \"#404040\";\n      }\n\n      series.points.getItemAt(3).dataLabel.showSeriesName = true;\n    }\n\n    chart.dataLabels.position = \"Center\";\n    chart.dataLabels.separator = \"\n\";\n    chart.dataLabels.format.font.color = \"#D9D9D9\";\n    await context.sync();\n  });\n}\n\nasync function changeColor() {\n  await Excel.run(async (context) => {\n    const worksheet = context.workbook.worksheets.getActiveWorksheet();\n    const chart = worksheet.charts.getItem(\"SlopeChart\");\n    chart.series.load(\"count\");\n    await context.sync();\n\n    // color everything grey before highlighting spokes\n    for (let i = 0; i < chart.series.count; i++) {\n      chart.series.getItemAt(i).format.line.color = \"#636363\";\n      chart.series.getItemAt(i).dataLabels.format.font.color = \"#636363\";\n    }\n\n    const highlight = chart.series.getItemAt(5);\n    highlight.format.line.color = \"#4472C4\";\n    highlight.dataLabels.format.font.color = \"#D9D9D9\";\n    await context.sync();\n  });\n}\n\nasync function clearChart() {\n  await Excel.run(async (context) => {\n    const charts = context.workbook.worksheets.getActiveWorksheet().charts;\n    charts.load(\"count\");\n    await context.sync();\n\n    for (let i = 0; i < charts.count; i++) {\n      charts.getItemAt(0).delete();\n    }\n    await context.sync();\n  });\n}\n\nasync function formatLegendFont() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let chart = sheet.charts.getItemAt(0);\n    chart.legend.visible = true;\n\n    // Format the legend font.\n    let font = chart.legend.format.font;\n    font.bold = true;\n    font.color = \"red\";\n    font.italic = true;\n    font.size = 15;\n    font.name = \"Calibri\";\n    font.underline = \"Single\";\n\n    await context.sync();\n  });\n}\n\nfunction addVerticalAxisLabel(context: Excel.RequestContext) {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n  let chart = sheet.charts.getItemAt(0);\n  let axis = chart.axes.valueAxis;\n  axis.displayUnit = \"Thousands\";\n}\n\nasync function addSeries() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    let seriesCollection = sheet.charts.getItemAt(0);\n    let rangeSelection = sheet.getRange(\"C2:C7\");\n    let xRangeSelection = sheet.getRange(\"A1:A7\");\n\n    // Add a series.\n    let newSeries = seriesCollection.series.add(\"Qtr2\");\n    newSeries.setValues(rangeSelection);\n    newSeries.setXAxisValues(xRangeSelection);\n\n    await context.sync();\n  });\n}\n\nasync function deleteSeries() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const seriesCollection = sheet.charts.getItemAt(0).series;\n    seriesCollection.load(\"count\");\n    await context.sync();\n\n    if (seriesCollection.count > 0) {\n      const series = seriesCollection.getItemAt(0);\n\n      // Delete the first series.\n      series.delete();\n    }\n\n    await context.sync();\n  });\n}\n\nasync function createLineChart(context: Excel.RequestContext) {\n  const sheet = context.workbook.worksheets.getItem(\"Sample\");\n  const salesTable = sheet.tables.getItem(\"SalesTable\");\n\n  let dataRange = sheet.getRange(\"A1:B7\");\n  let chart = sheet.charts.add(\"Line\", dataRange, \"Auto\");\n\n  chart.setPosition(\"A15\", \"E30\");\n  chart.legend.position = \"Right\";\n  chart.legend.format.fill.setSolidColor(\"white\");\n  chart.dataLabels.format.font.size = 15;\n  chart.dataLabels.format.font.color = \"black\";\n}"
		}
	]
}