{
	"Templates": [
		{
			"Description": "Applies ( apply ) conditional formats.",
			"SampleCodes": "enum ConditionalFormatType {\n    custom = \"Custom\",\n    dataBar = \"DataBar\",\n    colorScale = \"ColorScale\",\n    iconSet = \"IconSet\",\n    topBottom = \"TopBottom\",\n    presetCriteria = \"PresetCriteria\",\n    containsText = \"ContainsText\",\n    cellValue = \"CellValue\"\n}\nenum ConditionalFormatColorCriterionType {\n    invalid = \"Invalid\",\n    lowestValue = \"LowestValue\",\n    highestValue = \"HighestValue\",\n    number = \"Number\",\n    percent = \"Percent\",\n    formula = \"Formula\",\n    percentile = \"Percentile\"\n}\n  \nasync function applyColorScaleFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n      minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n      midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n      maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n  });\n}\n\nasync function listConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat; range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach((item) => {\n      cfRangePairs.push({\n        cf: item,\n        range: item.getRange().load(\"address\")\n      });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n      cfRangePairs.forEach((item) => {\n        console.log(item.cf.type);\n      });\n    } else {\n      console.log(\"No conditional formats applied.\");\n    }\n  });\n}\n\nasync function clearAllConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n  });\n}\n\nenum ConditionalFormatType {\n    custom = \"Custom\",\n    dataBar = \"DataBar\",\n    colorScale = \"ColorScale\",\n    iconSet = \"IconSet\",\n    topBottom = \"TopBottom\",\n    presetCriteria = \"PresetCriteria\",\n    containsText = \"ContainsText\",\n    cellValue = \"CellValue\"\n}\n\nasync function applyConditionalFormatsWithDefaultPriority() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    // Set low numbers to bold, dark red font. This format will\n    // get priority 0.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n\n    // Set negative numbers to blue font with green background.\n    // This format will get priority 1.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n  });\n}\n\nasync function applyPrioritizedConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n\n    // Set negative numbers to blue font with green background and\n    // set priority 0.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n\n    await context.sync();\n  });\n}\n\nasync function applyPrioritizedConditionalFormatsWithStopOnTrue() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n\n    // Set negative numbers to blue font with green background and\n    // set priority 0, but set stopIfTrue to true, so none of the\n    // formatting of the conditional format with the higher priority\n    // value will apply, not even the bolding of the font.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n    cellValueFormat.stopIfTrue = true;\n\n    await context.sync();\n  });\n}\n\nasync function removeConditionalFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n    temperatureDataRange.conditionalFormats.getItemAt(0).delete();\n\n    await context.sync();\n  });\n}\n\nfunction queueCommandsToClearAllConditionalFormats(sheet: Excel.Worksheet) {\n  const range = sheet.getRange();\n  range.conditionalFormats.clearAll();\n}"
		}
	]
}