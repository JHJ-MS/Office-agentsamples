{
	"Templates": [
		{
			"Description": "Applies common types of conditional formatting to ranges.",
			"SampleCodes": "enum ConditionalFormatType {\n    custom = \"Custom\",\n    dataBar = \"DataBar\",\n    colorScale = \"ColorScale\",\n    iconSet = \"IconSet\",\n    topBottom = \"TopBottom\",\n    presetCriteria = \"PresetCriteria\",\n    containsText = \"ContainsText\",\n    cellValue = \"CellValue\"\n}\nenum ConditionalFormatColorCriterionType {\n    invalid = \"Invalid\",\n    lowestValue = \"LowestValue\",\n    highestValue = \"HighestValue\",\n    number = \"Number\",\n    percent = \"Percent\",\n    formula = \"Formula\",\n    percentile = \"Percentile\"\n}\n  \nasync function applyColorScaleFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.colorScale);\n    const criteria = {\n      minimum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.lowestValue, color: \"blue\" },\n      midpoint: { formula: \"50\", type: Excel.ConditionalFormatColorCriterionType.percent, color: \"yellow\" },\n      maximum: { formula: null, type: Excel.ConditionalFormatColorCriterionType.highestValue, color: \"red\" }\n    };\n    conditionalFormat.colorScale.criteria = criteria;\n\n    await context.sync();\n  });\n}\n\nasync function applyPresetFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B2:M5\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    conditionalFormat.preset.format.font.color = \"white\";\n    conditionalFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevAboveAverage };\n\n    await context.sync();\n  });\n}\n\nasync function applyDataBarFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.dataBar);\n    conditionalFormat.dataBar.barDirection = Excel.ConditionalDataBarDirection.leftToRight;\n\n    await context.sync();\n  });\n}\n\nasync function applyIconSetFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.iconSet);\n    const iconSetCF = conditionalFormat.iconSet;\n    iconSetCF.style = Excel.IconSet.threeTriangles;\n\n    /*\n            The iconSetCF.criteria array is automatically prepopulated with\n            criterion elements whose properties have been given default settings.\n            You can't write to each property of a criterion directly. Instead,\n            replace the whole criteria object.\n\n            With a \"three*\" icon set style, such as \"threeTriangles\", the third\n            element in the criteria array (criteria[2]) defines the \"top\" icon;\n            e.g., a green triangle. The second (criteria[1]) defines the \"middle\"\n            icon. The first (criteria[0]) defines the \"low\" icon, but it\n            can often be left empty as the following object shows, because every\n            cell that does not match the other two criteria always gets the low\n            icon.            \n        */\n    iconSetCF.criteria = [\n      {} as any,\n      {\n        type: Excel.ConditionalFormatIconRuleType.number,\n        operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n        formula: \"=700\"\n      },\n      {\n        type: Excel.ConditionalFormatIconRuleType.number,\n        operator: Excel.ConditionalIconCriterionOperator.greaterThanOrEqual,\n        formula: \"=1000\"\n      }\n    ];\n\n    await context.sync();\n  });\n}\n\nasync function applyTextFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B16:D18\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.containsText);\n    conditionalFormat.textComparison.format.font.color = \"red\";\n    conditionalFormat.textComparison.rule = { operator: Excel.ConditionalTextOperator.contains, text: \"Delayed\" };\n\n    await context.sync();\n  });\n}\n\nasync function applyCellValueFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    conditionalFormat.cellValue.format.font.color = \"red\";\n    conditionalFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n  });\n}\n\nasync function applyTopBottomFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B21:E23\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.topBottom);\n    conditionalFormat.topBottom.format.fill.color = \"green\";\n    conditionalFormat.topBottom.rule = { rank: 1, type: \"TopItems\" };\n\n    await context.sync();\n  });\n}\n\nasync function applyCustomFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange(\"B8:E13\");\n    const conditionalFormat = range.conditionalFormats.add(Excel.ConditionalFormatType.custom);\n    conditionalFormat.custom.rule.formula = '=IF(B8>INDIRECT(\"RC[-1]\",0),TRUE)';\n    conditionalFormat.custom.format.font.color = \"green\";\n\n    await context.sync();\n  });\n}\n\nasync function listConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const worksheetRange = sheet.getRange();\n    worksheetRange.conditionalFormats.load(\"type\");\n\n    await context.sync();\n\n    let cfRangePairs: { cf: Excel.ConditionalFormat; range: Excel.Range }[] = [];\n    worksheetRange.conditionalFormats.items.forEach((item) => {\n      cfRangePairs.push({\n        cf: item,\n        range: item.getRange().load(\"address\")\n      });\n    });\n\n    await context.sync();\n\n    if (cfRangePairs.length > 0) {\n      cfRangePairs.forEach((item) => {\n        console.log(item.cf.type);\n      });\n    } else {\n      console.log(\"No conditional formats applied.\");\n    }\n  });\n}\n\nasync function clearAllConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const range = sheet.getRange();\n    range.conditionalFormats.clearAll();\n\n    await context.sync();\n\n    $(\".conditional-formats\").hide();\n  });\n}\n\nasync function setup() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    queueCommandsToCreateTemperatureTable(sheet);\n    queueCommandsToCreateSalesTable(sheet);\n    queueCommandsToCreateProjectTable(sheet);\n    queueCommandsToCreateProfitLossTable(sheet);\n\n    let format = sheet.getRange().format;\n    format.autofitColumns();\n    format.autofitRows();\n\n    sheet.activate();\n    await context.sync();\n  });\n}\n\nfunction queueCommandsToCreateTemperatureTable(sheet: Excel.Worksheet) {\n  let temperatureTable = sheet.tables.add(\"A1:M1\", true);\n  temperatureTable.name = \"TemperatureTable\";\n  temperatureTable.getHeaderRowRange().values = [\n    [\"Category\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  ];\n  temperatureTable.rows.add(null, [\n    [\"Avg High\", 40, 38, 44, 45, 51, 56, 67, 72, 79, 59, 45, 41],\n    [\"Avg Low\", 34, 33, 38, 41, 45, 48, 51, 55, 54, 45, 41, 38],\n    [\"Record High\", 61, 69, 79, 83, 95, 97, 100, 101, 94, 87, 72, 66],\n    [\"Record Low\", 0, 2, 9, 24, 28, 32, 36, 39, 35, 21, 12, 4]\n  ]);\n}\n\nfunction queueCommandsToCreateSalesTable(sheet: Excel.Worksheet) {\n  let salesTable = sheet.tables.add(\"A7:E7\", true);\n  salesTable.name = \"SalesTable\";\n  salesTable.getHeaderRowRange().values = [[\"Sales Team\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"]];\n  salesTable.rows.add(null, [\n    [\"Asian Team 1\", 500, 700, 654, 234],\n    [\"Asian Team 2\", 400, 323, 276, 345],\n    [\"Asian Team 3\", 1200, 876, 845, 456],\n    [\"Euro Team 1\", 600, 500, 854, 567],\n    [\"Euro Team 2\", 5001, 2232, 4763, 678],\n    [\"Euro Team 3\", 130, 776, 104, 789]\n  ]);\n}\n\nfunction queueCommandsToCreateProjectTable(sheet: Excel.Worksheet) {\n  let projectTable = sheet.tables.add(\"A15:D15\", true);\n  projectTable.name = \"ProjectTable\";\n  projectTable.getHeaderRowRange().values = [[\"Project\", \"Alpha\", \"Beta\", \"Ship\"]];\n  projectTable.rows.add(null, [\n    [\"Project 1\", \"Complete\", \"Ongoing\", \"On Schedule\"],\n    [\"Project 2\", \"Complete\", \"Complete\", \"On Schedule\"],\n    [\"Project 3\", \"Ongoing\", \"Not Started\", \"Delayed\"]\n  ]);\n}\n\nfunction queueCommandsToCreateProfitLossTable(sheet: Excel.Worksheet) {\n  let profitLossTable = sheet.tables.add(\"A20:E20\", true);\n  profitLossTable.name = \"ProfitLossTable\";\n  profitLossTable.getHeaderRowRange().values = [[\"Company\", \"2013\", \"2014\", \"2015\", \"2016\"]];\n  profitLossTable.rows.add(null, [\n    [\"Contoso\", 256.0, -55.31, 68.9, -82.13],\n    [\"Fabrikam\", 454.0, 75.29, -88.88, 781.87],\n    [\"Northwind\", -858.21, 35.33, 49.01, 112.68]\n  ]);\n  profitLossTable.getDataBodyRange().numberFormat = [[\"$#,##0.00\"]];\n}"
		}
	]
}