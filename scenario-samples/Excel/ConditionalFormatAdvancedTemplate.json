{
	"Templates": [
		{
			"Description": "Applies more than one conditional format on the same range.",
			"SampleCodes": "enum ConditionalFormatType {\n    custom = \"Custom\",\n    dataBar = \"DataBar\",\n    colorScale = \"ColorScale\",\n    iconSet = \"IconSet\",\n    topBottom = \"TopBottom\",\n    presetCriteria = \"PresetCriteria\",\n    containsText = \"ContainsText\",\n    cellValue = \"CellValue\"\n}\n\nasync function applyConditionalFormatsWithDefaultPriority() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    /* When the priority property of ConditionalFormat objects \n           is not explicitly set, they are prioritized in the order\n           that they are added, with zero-based numbering: 0, 1, ...\n           Contradictions are resolved in favor of the format with\n           the lower priority number. In the example below, negative\n           numbers will get a green background, but NOT a blue font,\n           because priority goes to the format that gives them a red font.\n        */\n\n    // Set low numbers to bold, dark red font. This format will\n    // get priority 0.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n\n    // Set negative numbers to blue font with green background.\n    // This format will get priority 1.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n\n    await context.sync();\n  });\n}\n\nasync function applyPrioritizedConditionalFormats() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    /* Contradictions are resolved in favor of the format with\n           the lower priority number. In the example below, negative\n           numbers will get a bold font, but NOT a red font, because\n           priority goes to the format that gives them a blue font.\n        */\n\n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n\n    // Set negative numbers to blue font with green background and\n    // set priority 0.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n\n    await context.sync();\n  });\n}\n\nasync function applyPrioritizedConditionalFormatsWithStopOnTrue() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    queueCommandsToClearAllConditionalFormats(sheet);\n\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n\n    /* Contradictions are resolved in favor of the format with\n           the lower priority number. In the example below, negative\n           numbers will get a blue font, but NOT a red font, because\n           priority goes to the format that gives them a blue font.\n           And the font will not be bolded because setting stopIfTrue\n           to true on the conditional format with priority 0 blocks\n           all formatting for any conditional formats with a higher\n           priority value.\n        */\n\n    // Set low numbers to bold, dark red font and assign priority 1.\n    const presetFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.presetCriteria);\n    presetFormat.preset.format.font.color = \"red\";\n    presetFormat.preset.format.font.bold = true;\n    presetFormat.preset.rule = { criterion: Excel.ConditionalFormatPresetCriterion.oneStdDevBelowAverage };\n    presetFormat.priority = 1;\n\n    // Set negative numbers to blue font with green background and\n    // set priority 0, but set stopIfTrue to true, so none of the\n    // formatting of the conditional format with the higher priority\n    // value will apply, not even the bolding of the font.\n    const cellValueFormat = temperatureDataRange.conditionalFormats.add(Excel.ConditionalFormatType.cellValue);\n    cellValueFormat.cellValue.format.font.color = \"blue\";\n    cellValueFormat.cellValue.format.fill.color = \"lightgreen\";\n    cellValueFormat.cellValue.rule = { formula1: \"=0\", operator: \"LessThan\" };\n    cellValueFormat.priority = 0;\n    cellValueFormat.stopIfTrue = true;\n\n    await context.sync();\n  });\n}\n\nasync function removeConditionalFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const temperatureDataRange = sheet.tables.getItem(\"TemperatureTable\").getDataBodyRange();\n    temperatureDataRange.conditionalFormats.getItemAt(0).delete();\n\n    await context.sync();\n  });\n}\n\nfunction queueCommandsToClearAllConditionalFormats(sheet: Excel.Worksheet) {\n  const range = sheet.getRange();\n  range.conditionalFormats.clearAll();\n}\n\nasync function setup() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    queueCommandsToCreateTemperatureTable(sheet);\n    sheet.activate();\n\n    await context.sync();\n  });\n}\n\nfunction queueCommandsToCreateTemperatureTable(sheet: Excel.Worksheet) {\n  let temperatureTable = sheet.tables.add(\"A1:M1\", true);\n  temperatureTable.name = \"TemperatureTable\";\n  temperatureTable.getHeaderRowRange().values = [\n    [\"Category\", \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"]\n  ];\n  temperatureTable.rows.add(null, [\n    [\"Avg High\", 40, 38, 44, 45, 51, 56, 67, 72, 79, 59, 45, 41],\n    [\"Avg Low\", 34, 33, 38, 41, 45, 48, 51, 55, 54, 45, 41, 38],\n    [\"Record High\", 61, 69, 79, 83, 95, 97, 100, 101, 94, 87, 72, 66],\n    [\"Record Low\", -1, 2, 9, 24, 28, 32, 36, 39, 35, 21, 12, 4]\n  ]);\n  temperatureTable.getRange().format.autofitColumns();\n  temperatureTable.getRange().format.autofitRows();\n}"
		}
	]
}