{
  "Templates": [
    {
      "Description": "Filter table data. Clear filters. Get value of a table row, colomn and header. Import JSON data, sort the data.",
      "SampleCodes": "async function getTableData() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    // Get the first table of the worksheet\n    const fisrtTable = sheet.tables.getItemAt(0);\n\n    // Get the table's header's value of the fisrtTable\n    const headerRange = fisrtTable.getHeaderRowRange().load(\"values\");\n    await sheet.context.sync();\n    const headerValues = headerRange.values;\n    console.log(headerValues);\n\n    // Get the table's value of the fisrtTable\n    const bodyRange = fisrtTable.getDataBodyRange().load(\"values\");\n    await context.sync();\n    const bodyValues = bodyRange.values;\n    console.log(bodyValues);\n\n    // Get the first colomn's value of the fisrtTable\n    const columnRange = fisrtTable.columns\n      .getItemAt(0)\n      .getDataBodyRange()\n      .load(\"values\");\n    await context.sync();\n    const firstColumnValues = columnRange.values;\n    console.log(firstColumnValues);\n\n    // Get the first row's value of the fisrtTable\n    const rowRange = fisrtTable.rows.getItemAt(0).load(\"values\");\n    await context.sync();\n    const firstRowValues = rowRange.values; \n    console.log(firstRowValues);\n  });\n}\n\nasync function importJsonDataToTable() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    let expensesTable = sheet.tables.add(\"A1:D1\", true);\n    expensesTable.name = \"ExpensesTable\";\n    // The column of the Array should strictly align with the table\n    expensesTable.getHeaderRowRange().values = [[\"Date\", \"Merchant\", \"Category\", \"Amount\"]];\n	// The column of the Array should strictly align with the table\n    const newData = transactions.map((item) => [item.DATE, item.MERCHANT, item.CATEGORY, item.AMOUNT]);\n\n    expensesTable.rows.add(null, newData);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    sheet.activate();\n    await context.sync();\n  });\n}\n\nconst transactions = [\n  {\n    DATE: \"1/1/2017\",\n    MERCHANT: \"The Phone Company\",\n    CATEGORY: \"Communications\",\n    AMOUNT: \"$120\"\n  },\n  {\n    DATE: \"1/1/2017\",\n    MERCHANT: \"Southridge Video\",\n    CATEGORY: \"Entertainment\",\n    AMOUNT: \"$40\"\n  },\n  {\n    DATE: \"1/1/2017\",\n    MERCHANT: \"Coho Winery\",\n    CATEGORY: \"Restaurant\",\n    AMOUNT: \"$47\"\n  }\n];\n\nasync function sortTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const expensesTable = sheet.tables.getItem(\"ExpensesTable\");\n\n    // sort the table by the \"Amount\" column\n    const sortFields = [\n      {\n        key: 1, // The key for sorting is the second column of the table.\n        ascending: false\n      }\n    ];\n    expensesTable.sort.apply(sortFields);\n\n    await context.sync();\n  });\n}\n\nasync function filterTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    const firstTable = sheet.tables.getItemAt(0);\n\n    let filter = firstTable.columns.getItemAt(0).filter;\n    filter.apply({\n      filterOn: Excel.FilterOn.dynamic,\n      dynamicCriteria: Excel.DynamicFilterCriteria.belowAverage\n    });\n\n    filter = firstTable.columns.getItemAt(1).filter;\n    filter.apply({\n      filterOn: Excel.FilterOn.values,\n      values: [\"Restaurant\", \"Groceries\"]\n    });\n\n    await context.sync();\n  });\n}\n\nasync function clearFilters() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n\n    const firstTable = sheet.tables.getItemAt(0);\n\n    firstTable.clearFilters();\n\n    await context.sync();\n  });\n}\n"
    }
  ]
}