{
	"Templates": [
		{
			"Description": "Copies or moves data and format from one range to another. Create a merged range. Finds a range based on string matching.",
			"SampleCodes": "enum RangeCopyType {\n    all = \"All\",\n    formulas = \"Formulas\",\n    values = \"Values\",\n    formats = \"Formats\",\n    link = \"Link\"\n}\n\nasync function copyOnlyFormat() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\"); // Replace \"Sample\" to your own worksheet name\n    // Place a label in front of the copied data.\n    sheet.getRange(\"F5\").values = [[\"Copied Formatting\"]];\n\n    // Copy only the formatting of the cells.\n    sheet.getRange(\"G5\").copyFrom(\"A1:E1\", Excel.RangeCopyType.formats);\n    await context.sync();\n  });\n}\n\nasync function skipBlanks() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\"); // Replace \"Sample\" to your own worksheet name\n    // Place a label in front of the copied data.\n    sheet.getRange(\"F6\").values = [[\"Copied Without Blanks\"]];\n\n    // Fill the destination range so we can see the blank being skipped.\n    sheet.getRange(\"G6:K6\").values = [[\"Old Data\", \"Old Data\", \"Old Data\", \"Old Data\", \"Old Data\"]];\n\n    // Copy a range, omitting the blank cells so existing data is not overwritten in those cells.\n    sheet.getRange(\"G6\").copyFrom(\n      \"A1:E1\",\n      Excel.RangeCopyType.all,\n      true, // skipBlanks\n      false\n    ); // transpose\n    await context.sync();\n  });\n}\n\nasync function move() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\"); // Replace \"Sample\" to your own worksheet name\n    // Place a label in front of the moved data.\n    sheet.getRange(\"F12\").values = [[\"Moved Range:\"]];\n\n    // Move the range from A1:E1 to G12:K12.\n    sheet.getRange(\"A1:E1\").moveTo(\"G12\");\n    await context.sync();\n  });\n}\n\nenum SearchDirection {\n    forward = \"Forward\",\n    backwards = \"Backwards\"\n}\n\nasync function findTextWithNullCheck() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const table = sheet.tables.getItem(\"ExpensesTable\");\n    const searchRange = table.getRange();\n    const foundRange = searchRange.findOrNullObject(\n      \"StringToFind\", // Replace by the string you want to find.\n      {\n        completeMatch: isCompleteMatchToggle,\n        matchCase: isMatchCaseToggle,\n        searchDirection: searchDirectionToggle\n      }\n    );\n\n    foundRange.load(\"address\");\n    await context.sync();\n\n    if (foundRange.isNullObject) {\n      console.log(\"Text not found\");\n    } else {\n      console.log(foundRange.address);\n    }\n  });\n}\n\nfunction toggleComplete() {\n  isCompleteMatchToggle = !isCompleteMatchToggle;\n  console.log(\"Finding complete match = \" + isCompleteMatchToggle);\n}\n\nfunction toggleCase() {\n  isMatchCaseToggle = !isMatchCaseToggle;\n  console.log(\"Finding matched case = \" + isMatchCaseToggle);\n}\n\nfunction toggleDirection() {\n  searchDirectionToggle =\n    searchDirectionToggle === Excel.SearchDirection.forward\n      ? Excel.SearchDirection.backwards\n      : Excel.SearchDirection.forward;\n  console.log(\"Search direction = \" + searchDirectionToggle);\n}\n\nasync function createMergedRange() {\n  await Excel.run(async (context) => {\n    // Retrieve the worksheet and the table in that worksheet.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const tableRange = sheet.getRange(\"B2:E6\");\n\n    // Create a merged range in the first row of the table.\n    const chartTitle = tableRange.getRow(0);\n    chartTitle.merge(true);\n\n    // Format the merged range.\n    chartTitle.format.horizontalAlignment = \"Center\";\n\n    await context.sync();\n  });\n}\n\nasync function getMergedRange() {\n  await Excel.run(async (context) => {\n    // Retrieve the worksheet and the table in that worksheet.\n    const sheet = context.workbook.worksheets.getActiveWorksheet();\n    const tableRange = sheet.getRange(\"B2:E6\");\n\n    // Retrieve the merged range within the table and load its details.\n    const mergedAreas = tableRange.getMergedAreasOrNullObject();\n    mergedAreas.load(\"address\");\n    mergedAreas.load(\"cellCount\");\n\n    // Select the merged range.\n    const range = mergedAreas.areas.getItemAt(0);\n    range.select();\n    await context.sync();\n\n    // Print out the details of the `mergedAreas` range object.\n    console.log(`Address of the merged range: ${mergedAreas.address}`);\n    console.log(`Number of cells in the merged range: ${mergedAreas.cellCount}`);\n\n    await context.sync();\n  });\n}\n\nasync function tryCreateChartFromEmptyTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(true /* valuesOnly */);\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n      console.log(\"Need Data to Make Chart\");\n      console.log(\n        \"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\"\n      );\n    } else {\n      const chart = sheet.charts.add(Excel.ChartType.columnClustered, dataRange, \"Columns\");\n      chart.setPosition(\"A15\", \"F30\");\n      chart.title.text = \"Quarterly sales chart\";\n      chart.legend.position = \"Right\";\n      chart.legend.format.fill.setSolidColor(\"white\");\n      chart.dataLabels.format.font.size = 15;\n      chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n  });\n}\n\nasync function fillTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n    dataRange.values = [\n      [\"Frames\", 5000, 7000, 6544, 4377],\n      [\"Saddles\", 400, 323, 276, 651],\n      [\"Brake levers\", 12000, 8766, 8456, 9812],\n      [\"Chains\", 1550, 1088, 692, 853],\n      [\"Mirrors\", 225, 600, 923, 544],\n      [\"Spokes\", 6005, 7634, 4589, 8765]\n    ];\n\n    dataRange.format.autofitColumns();\n    await context.sync();\n  });\n}"
		}
	]
}