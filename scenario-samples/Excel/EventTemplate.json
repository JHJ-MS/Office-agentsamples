{
  "Templates": [
    {
      "Description": "Registers, triggers and deregisters event. Detect events.",
      "SampleCodes": "async function registerChangeEventHandler() {\n  await Excel.run(async (context) => {\n    const expensesTable = context.workbook.worksheets.getActiveWorksheet().tables.getItem(\"ExpensesTable\");\n\n    // This event fires when a user edits a cell in the table.\n    expensesTable.onChanged.add(onTableChanged);\n    await context.sync();\n\n    console.log(\"Added onChanged handler\");\n  });\n}\n\nasync function onTableChanged(eventArgs: Excel.TableChangedEventArgs) {\n  await Excel.run(async (context) => {\n    const details = eventArgs.details;\n    const address = eventArgs.address;\n\n    console.log(\n      `Change at ${address}: was ${details.valueBefore}(${details.valueTypeBefore}),` +\n        ` now is ${details.valueAfter}(${details.valueTypeAfter})`\n    );\n  });\n}\n\nasync function registerFormulaChangeHandler() {\n  await Excel.run(async (context) => {\n    // Retrieve the worksheet named \"Sample\".\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    // Register the formula changed event handler for this worksheet.\n    sheet.onFormulaChanged.add(formulaChangeHandler);\n    await context.sync();\n\n    console.log(\"Registered a formula changed event handler for this worksheet.\");\n  });\n}\n\nasync function formulaChangeHandler(event: Excel.WorksheetFormulaChangedEventArgs) {\n  await Excel.run(async (context) => {\n    // Retrieve details about the formula change event.\n    const cellAddress = event.formulaDetails[0].cellAddress;\n    const previousFormula = event.formulaDetails[0].previousFormula;\n    const source = event.source;\n\n    // Print out the change event details.\n    console.log(\n      `The formula in cell ${cellAddress} changed. \n      The previous formula was: ${previousFormula}. \n      The source of the change was: ${source}.`\n    );\n  });\n}\n\nasync function registerEventHandlers() {\n  await Excel.run(async (context) => {\n    // Add a selection changed event handler for the table.\n    let table = context.workbook.tables.getItemAt(0);\n    table.onSelectionChanged.add(onTableSelectionChange);\n\n    // Add a selection changed event handler for the worksheet.\n    let sheet = context.workbook.worksheets.getItem(\"Sample\");\n    sheet.onSelectionChanged.add(onWorksheetSelectionChange);\n\n    // Add a selection changed event handler for the worksheet collection.\n    context.workbook.worksheets.onSelectionChanged.add(onWorksheetCollectionSelectionChange);\n\n    await context.sync();\n  });\n}\n\nasync function onTableSelectionChange(args: Excel.TableSelectionChangedEventArgs) {\n  await Excel.run(async (context) => {\n    console.log(`Table event: The address of new selection is: ${args.address}`);\n  });\n}\n\nasync function onWorksheetSelectionChange(args: Excel.WorksheetSelectionChangedEventArgs) {\n  await Excel.run(async (context) => {\n    console.log(`Worksheet event: The address of new selection is: ${args.address}`);\n  });\n}\n\nasync function onWorksheetCollectionSelectionChange(args: Excel.WorksheetSelectionChangedEventArgs) {\n  await Excel.run(async (context) => {\n    console.log(`WorksheetCollection event: The address of new selection is: ${args.address}`);\n  });\n}"
    }
  ]
}