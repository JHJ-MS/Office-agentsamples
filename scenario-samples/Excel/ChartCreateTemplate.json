{
	"Templates": [
		{
			"Description": "Create different type charts.",
			"SampleCodes": "enum ChartType {\n    invalid = \"Invalid\",\n    columnClustered = \"ColumnClustered\",\n    columnStacked = \"ColumnStacked\",\n    columnStacked100 = \"ColumnStacked100\",\n    _3DColumnClustered = \"3DColumnClustered\",\n    _3DColumnStacked = \"3DColumnStacked\",\n    _3DColumnStacked100 = \"3DColumnStacked100\",\n    barClustered = \"BarClustered\",\n    barStacked = \"BarStacked\",\n    barStacked100 = \"BarStacked100\",\n    _3DBarClustered = \"3DBarClustered\",\n    _3DBarStacked = \"3DBarStacked\",\n    _3DBarStacked100 = \"3DBarStacked100\",\n    lineStacked = \"LineStacked\",\n    lineStacked100 = \"LineStacked100\",\n    lineMarkers = \"LineMarkers\",\n    lineMarkersStacked = \"LineMarkersStacked\",\n    lineMarkersStacked100 = \"LineMarkersStacked100\",\n    pieOfPie = \"PieOfPie\",\n    pieExploded = \"PieExploded\",\n    _3DPieExploded = \"3DPieExploded\",\n    barOfPie = \"BarOfPie\",\n    xyscatterSmooth = \"XYScatterSmooth\",\n    xyscatterSmoothNoMarkers = \"XYScatterSmoothNoMarkers\",\n    xyscatterLines = \"XYScatterLines\",\n    xyscatterLinesNoMarkers = \"XYScatterLinesNoMarkers\",\n    areaStacked = \"AreaStacked\",\n    areaStacked100 = \"AreaStacked100\",\n    _3DAreaStacked = \"3DAreaStacked\",\n    _3DAreaStacked100 = \"3DAreaStacked100\",\n    doughnutExploded = \"DoughnutExploded\",\n    radarMarkers = \"RadarMarkers\",\n    radarFilled = \"RadarFilled\",\n    surface = \"Surface\",\n    surfaceWireframe = \"SurfaceWireframe\",\n    surfaceTopView = \"SurfaceTopView\",\n    surfaceTopViewWireframe = \"SurfaceTopViewWireframe\",\n    bubble = \"Bubble\",\n    bubble3DEffect = \"Bubble3DEffect\",\n    stockHLC = \"StockHLC\",\n    stockOHLC = \"StockOHLC\",\n    stockVHLC = \"StockVHLC\",\n    stockVOHLC = \"StockVOHLC\",\n    cylinderColClustered = \"CylinderColClustered\",\n    cylinderColStacked = \"CylinderColStacked\",\n    cylinderColStacked100 = \"CylinderColStacked100\",\n    cylinderBarClustered = \"CylinderBarClustered\",\n    cylinderBarStacked = \"CylinderBarStacked\",\n    cylinderBarStacked100 = \"CylinderBarStacked100\",\n    cylinderCol = \"CylinderCol\",\n    coneColClustered = \"ConeColClustered\",\n    coneColStacked = \"ConeColStacked\",\n    coneColStacked100 = \"ConeColStacked100\",\n    coneBarClustered = \"ConeBarClustered\",\n    coneBarStacked = \"ConeBarStacked\",\n    coneBarStacked100 = \"ConeBarStacked100\",\n    coneCol = \"ConeCol\",\n    pyramidColClustered = \"PyramidColClustered\",\n    pyramidColStacked = \"PyramidColStacked\",\n    pyramidColStacked100 = \"PyramidColStacked100\",\n    pyramidBarClustered = \"PyramidBarClustered\",\n    pyramidBarStacked = \"PyramidBarStacked\",\n    pyramidBarStacked100 = \"PyramidBarStacked100\",\n    pyramidCol = \"PyramidCol\",\n    _3DColumn = \"3DColumn\",\n    line = \"Line\",\n    _3DLine = \"3DLine\",\n    _3DPie = \"3DPie\",\n    pie = \"Pie\",\n    xyscatter = \"XYScatter\",\n    _3DArea = \"3DArea\",\n    area = \"Area\",\n    doughnut = \"Doughnut\",\n    radar = \"Radar\",\n    histogram = \"Histogram\",\n    boxwhisker = \"Boxwhisker\",\n    pareto = \"Pareto\",\n    regionMap = \"RegionMap\",\n    treemap = \"Treemap\",\n    waterfall = \"Waterfall\",\n    sunburst = \"Sunburst\",\n    funnel = \"Funnel\"\n  }\n\nasync function createColumnClusteredChart() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n\n    const dataRange = salesTable.getDataBodyRange();\n\n    let chart = sheet.charts.add(\"ColumnClustered\", dataRange, \"Auto\");\n\n    chart.setPosition(\"A9\", \"F20\");\n    chart.title.text = \"Quarterly sales chart\";\n    chart.legend.position = \"Right\";\n    chart.legend.format.fill.setSolidColor(\"white\");\n    chart.dataLabels.format.font.size = 15;\n    chart.dataLabels.format.font.color = \"black\";\n    let points = chart.series.getItemAt(0).points;\n    points.getItemAt(0).format.fill.setSolidColor(\"pink\");\n    points.getItemAt(1).format.fill.setSolidColor(\"indigo\");\n\n    await context.sync();\n  });\n}\n\nasync function setup() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    let expensesTable = sheet.tables.add(\"A1:E1\", true);\n    expensesTable.name = \"SalesTable\";\n    expensesTable.getHeaderRowRange().values = [[\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"]];\n\n    expensesTable.rows.add(null, [\n      [\"Frames\", 5000, 7000, 6544, 4377],\n      [\"Saddles\", 400, 323, 276, 651],\n      [\"Brake levers\", 12000, 8766, 8456, 9812],\n      [\"Chains\", 1550, 1088, 692, 853],\n      [\"Mirrors\", 225, 600, 923, 544],\n      [\"Spokes\", 6005, 7634, 4589, 8765]\n    ]);\n\n    sheet.getUsedRange().format.autofitColumns();\n    sheet.getUsedRange().format.autofitRows();\n\n    sheet.activate();\n    await context.sync();\n  });\n}"
		}
	]
}