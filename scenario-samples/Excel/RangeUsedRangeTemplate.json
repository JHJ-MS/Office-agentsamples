{
	"Templates": [
		{
			"Description": "Tests for a used range and creates a chart from a table only if there's data in the table.",
			"SampleCodes": "async function tryCreateChartFromEmptyTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n\n    // Pass true so only cells with values count as used\n    const usedDataRange = dataRange.getUsedRangeOrNullObject(true /* valuesOnly */);\n\n    //Must sync before reading value returned from *OrNullObject method/property.\n    await context.sync();\n\n    if (usedDataRange.isNullObject) {\n      console.log(\"Need Data to Make Chart\");\n      console.log(\n        \"To create a meaningful chart, press 'Fill the table' (or add names to the Product column and numbers to some of the other cells). Then press 'Try to create chart' again.\"\n      );\n    } else {\n      const chart = sheet.charts.add(Excel.ChartType.columnClustered, dataRange, \"Columns\");\n      chart.setPosition(\"A15\", \"F30\");\n      chart.title.text = \"Quarterly sales chart\";\n      chart.legend.position = \"Right\";\n      chart.legend.format.fill.setSolidColor(\"white\");\n      chart.dataLabels.format.font.size = 15;\n      chart.dataLabels.format.font.color = \"black\";\n    }\n\n    await context.sync();\n  });\n}\n\nasync function fillTable() {\n  await Excel.run(async (context) => {\n    const sheet = context.workbook.worksheets.getItem(\"Sample\");\n    const salesTable = sheet.tables.getItem(\"SalesTable\");\n    const dataRange = salesTable.getDataBodyRange();\n    dataRange.values = [\n      [\"Frames\", 5000, 7000, 6544, 4377],\n      [\"Saddles\", 400, 323, 276, 651],\n      [\"Brake levers\", 12000, 8766, 8456, 9812],\n      [\"Chains\", 1550, 1088, 692, 853],\n      [\"Mirrors\", 225, 600, 923, 544],\n      [\"Spokes\", 6005, 7634, 4589, 8765]\n    ];\n\n    dataRange.format.autofitColumns();\n    await context.sync();\n  });\n}\n\nasync function setup() {\n  await Excel.run(async (context) => {\n    context.workbook.worksheets.getItemOrNullObject(\"Sample\").delete();\n    const sheet = context.workbook.worksheets.add(\"Sample\");\n\n    let salesTable = sheet.tables.add(\"B2:F2\", true /* hasHeaders */);\n    salesTable.name = \"SalesTable\";\n    salesTable.showTotals = true;\n    salesTable.getHeaderRowRange().values = [[\"Product\", \"Qtr1\", \"Qtr2\", \"Qtr3\", \"Qtr4\"]];\n\n    // The table should be created wtih no data.\n    salesTable.rows.add(null, [\n      [null, null, null, null, null],\n      [null, null, null, null, null],\n      [null, null, null, null, null],\n      [null, null, null, null, null],\n      [null, null, null, null, null],\n      [null, null, null, null, null]\n    ]);\n    sheet.activate();\n\n    await context.sync();\n  });\n}"
		}
	]
}